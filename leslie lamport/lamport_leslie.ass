[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: subtitles
ScriptType: v4.00+
PlayDepth: 0

[Aegisub Project Garbage]
Last Style Storage: Default
Video Position: 38

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Cambria,20,&H003FBACD,&H3F715D5F,&H00000000,&H02000000,0,0,0,0,100,100,0,0,1,1.2,1,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.25,0:00:02.90,Default,,0,0,0,,ladies and gentlemen
Dialogue: 0,0:00:02.76,0:00:05.30,Default,,0,0,0,,please welcome judith bishop
Dialogue: 0,0:00:13.49,0:00:15.35,Default,,0,0,0,,good afternoon everybody
Dialogue: 0,0:00:15.80,0:00:20.27,Default,,0,0,0,,welcome back to the plenary session of the Microsoft faculty summit
Dialogue: 0,0:00:20.21,0:00:23.54,Default,,0,0,0,,it's my great pleasure to introduce to you today
Dialogue: 0,0:00:23.34,0:00:29.84,Default,,0,0,0,,Leslie Lamport who's a principal researcher at our Microsoft Research Silicon Valley Lab
Dialogue: 0,0:00:30.71,0:00:36.02,Default,,0,0,0,,so students and faculty who have taught operating systems courses
Dialogue: 0,0:00:36.09,0:00:39.47,Default,,0,0,0,,as well as anybody who's really used a computer
Dialogue: 0,0:00:39.50,0:00:42.86,Default,,0,0,0,,will have benefited from Leslie's work
Dialogue: 0,0:00:42.60,0:00:47.42,Default,,0,0,0,,on logical clocks 、safety and liveness 、sequential consistency
Dialogue: 0,0:00:47.34,0:00:50.93,Default,,0,0,0,,and many other parts of operating systems
Dialogue: 0,0:00:50.85,0:00:57.92,Default,,0,0,0,,which laid the basis for the safe operation of the computers that we have today
Dialogue: 0,0:00:57.63,0:01:05.00,Default,,0,0,0,,as they moved from the single desktop to the large number of interconnected devices we have
Dialogue: 0,0:01:06.11,0:01:13.58,Default,,0,0,0,,Leslie before he joined Microsoft was a member of certain various prestigious institutions
Dialogue: 0,0:01:13.98,0:01:22.79,Default,,0,0,0,,he was at MIT 、at Brandis University and at companies such as Dec 、Compaq and SR I
Dialogue: 0,0:01:23.96,0:01:30.29,Default,,0,0,0,,in his career he has also received several honorary doctorates
Dialogue: 0,0:01:30.39,0:01:38.57,Default,,0,0,0,,and he has tried very hard to help scientists see their works’s beautiful
Dialogue: 0,0:01:38.82,0:01:42.02,Default,,0,0,0,,and for that purpose he also developed something
Dialogue: 0,0:01:41.94,0:01:44.81,Default,,0,0,0,,that I think you all know very well which is let ik
Dialogue: 0,0:01:45.35,0:01:50.09,Default,,0,0,0,,he's now going to go on and try and persuade engineers
Dialogue: 0,0:01:50.34,0:01:53.57,Default,,0,0,0,,that there's something else that is beautiful in life
Dialogue: 0,0:01:53.10,0:01:54.98,Default,,0,0,0,,which is mathematics and
Dialogue: 0,0:01:54.89,0:01:57.92,Default,,0,0,0,,that's what he's going to talk to us about today
Dialogue: 0,0:01:58.40,0:02:01.76,Default,,0,0,0,,so ladies and gentlemen please put your hands together
Dialogue: 0,0:02:01.50,0:02:04.00,Default,,0,0,0,,for this year's am Turing Award winner
Dialogue: 0,0:02:04.01,0:02:05.51,Default,,0,0,0,,Leslie Lamport
Dialogue: 0,0:02:10.94,0:02:12.53,Default,,0,0,0,,Thank You Judith
Dialogue: 0,0:02:14.72,0:02:16.85,Default,,0,0,0,,thinking above the code
Dialogue: 0,0:02:17.03,0:02:18.80,Default,,0,0,0,,why do we think
Dialogue: 0,0:02:19.46,0:02:22.07,Default,,0,0,0,,well it helps us do most things
Dialogue: 0,0:02:22.43,0:02:28.79,Default,,0,0,0,,like hunting a saber-toothed tiger or building a house or writing a program
Dialogue: 0,0:02:29.66,0:02:32.18,Default,,0,0,0,,so when should we think
Dialogue: 0,0:02:32.81,0:02:39.68,Default,,0,0,0,,well hunting a saber-toothed tiger we should think before leaving the cave
Dialogue: 0,0:02:39.47,0:02:43.07,Default,,0,0,0,,when the tiger is charging at you
Dialogue: 0,0:02:42.78,0:02:43.88,Default,,0,0,0,,it's a little late
Dialogue: 0,0:02:44.18,0:02:48.50,Default,,0,0,0,,building a house before beginning construction
Dialogue: 0,0:02:48.56,0:02:51.23,Default,,0,0,0,,you don't want to think about what you're doing
Dialogue: 0,0:02:50.76,0:02:54.98,Default,,0,0,0,,when the Carpenters are putting the roof on
Dialogue: 0,0:02:55.40,0:02:58.22,Default,,0,0,0,,allready start thinking about what you're doing
Dialogue: 0,0:02:58.31,0:03:04.85,Default,,0,0,0,,writing a program we should be thinking before we start writing any code
Dialogue: 0,0:03:06.11,0:03:07.67,Default,,0,0,0,,how to think
Dialogue: 0,0:03:09.71,0:03:13.52,Default,,0,0,0,,when I favorite quotes is from the cartoonist Guindon
Dialogue: 0,0:03:13.67,0:03:19.64,Default,,0,0,0,,who says writing is nature's way of letting you know how sloppy your thinking is
Dialogue: 0,0:03:20.12,0:03:24.71,Default,,0,0,0,,to think to really think you have to write
Dialogue: 0,0:03:24.42,0:03:27.17,Default,,0,0,0,,if you're thinking without writing
Dialogue: 0,0:03:27.62,0:03:30.17,Default,,0,0,0,,chances are you're fooling yourself
Dialogue: 0,0:03:29.90,0:03:33.71,Default,,0,0,0,,we're only pretending to think
Dialogue: 0,0:03:34.61,0:03:36.26,Default,,0,0,0,,what to write？
Dialogue: 0,0:03:36.86,0:03:39.71,Default,,0,0,0,,well hunting a saber-toothed tiger
Dialogue: 0,0:03:41.19,0:03:44.96,Default,,0,0,0,,writing wasn't invented then which meant it was a very dangerous activity
Dialogue: 0,0:03:46.85,0:03:48.41,Default,,0,0,0,,building a house
Dialogue: 0,0:03:49.19,0:03:54.98,Default,,0,0,0,,well what'd you write before you build to start building a house are called blueprints
Dialogue: 0,0:03:55.23,0:03:56.84,Default,,0,0,0,,and it's called drawing blueprints
Dialogue: 0,0:03:58.16,0:03:59.72,Default,,0,0,0,,writing a program
Dialogue: 0,0:04:00.11,0:04:04.34,Default,,0,0,0,,well you should also write a blueprint of your program
Dialogue: 0,0:04:04.40,0:04:08.03,Default,,0,0,0,,but blueprints of programs are what we call specifications
Dialogue: 0,0:04:10.07,0:04:10.57,Default,,0,0,0,,specifications
Dialogue: 0,0:04:11.81,0:04:15.68,Default,,0,0,0,,well when I say the word people tend to panic
Dialogue: 0,0:04:15.75,0:04:21.55,Default,,0,0,0,,this formal stuff that's impossible to read and understand
Dialogue: 0,0:04:21.59,0:04:25.27,Default,,0,0,0,,and you have to learn these funny symbols and all that sort of stuff
Dialogue: 0,0:04:25.81,0:04:30.67,Default,,0,0,0,,yeah this is a blueprint you know all these complicated stuff going on
Dialogue: 0,0:04:30.61,0:04:32.86,Default,,0,0,0,,but this is also a blueprint
Dialogue: 0,0:04:32.93,0:04:38.50,Default,,0,0,0,,in fact there's an entire spectrum of blueprints
Dialogue: 0,0:04:39.43,0:04:45.00,Default,,0,0,0,,ranging from very detailed complicated blueprints
Dialogue: 0,0:04:45.52,0:04:50.29,Default,,0,0,0,,which you need if you're building something that's very big and complicated
Dialogue: 0,0:04:50.83,0:04:52.63,Default,,0,0,0,,at the other end
Dialogue: 0,0:04:52.67,0:04:58.09,Default,,0,0,0,,they're just rough sketch of what you're building is just something you know really simple
Dialogue: 0,0:04:57.98,0:04:59.68,Default,,0,0,0,,that you're gonna do in the weekend
Dialogue: 0,0:04:59.95,0:05:05.47,Default,,0,0,0,,and there are these ordinary blueprints for
Dialogue: 0,0:05:05.21,0:05:08.92,Default,,0,0,0,,you know things like a house or the stuff
Dialogue: 0,0:05:08.69,0:05:13.90,Default,,0,0,0,,that kinds of blueprints that most of us might have seen
Dialogue: 0,0:05:14.41,0:05:17.95,Default,,0,0,0,,and similarly there's a spectrum of specifications
Dialogue: 0,0:05:18.97,0:05:21.34,Default,,0,0,0,,there are formal specifications
Dialogue: 0,0:05:21.77,0:05:26.95,Default,,0,0,0,,and on the other end of the your formal specifications
Dialogue: 0,0:05:27.20,0:05:29.68,Default,,0,0,0,,written in a in a precise formal language
Dialogue: 0,0:05:29.60,0:05:33.31,Default,,0,0,0,,and on the other end there are just short prose specifications
Dialogue: 0,0:05:33.77,0:05:38.89,Default,,0,0,0,,and in the middle are what I like to call mathematical prose
Dialogue: 0,0:05:39.64,0:05:46.33,Default,,0,0,0,,most code is really simple few sentences of prose will do
Dialogue: 0,0:05:49.03,0:05:53.80,Default,,0,0,0,,some code is subtle will requires more thought
Dialogue: 0,0:05:53.66,0:06:04.30,Default,,0,0,0,,and for that you have to write it ’s prose but it's it try to be you need to be pretty precise
Dialogue: 0,0:06:04.28,0:06:10.81,Default,,0,0,0,,and some code is either very complex or very subtle or critical
Dialogue: 0,0:06:11.21,0:06:15.49,Default,,0,0,0,,and that's especially the case if what you're doing
Dialogue: 0,0:06:15.02,0:06:19.03,Default,,0,0,0,,is writing concurrent or distributed system
Dialogue: 0,0:06:18.95,0:06:23.35,Default,,0,0,0,,it is going to be complex and subtle and quite likely critical
Dialogue: 0,0:06:23.54,0:06:27.88,Default,,0,0,0,,and for that you should have tools
Dialogue: 0,0:06:27.83,0:06:29.50,Default,,0,0,0,,you should be using tools
Dialogue: 0,0:06:29.24,0:06:32.17,Default,,0,0,0,,to check it to check your blueprints
Dialogue: 0,0:06:32.53,0:06:37.59,Default,,0,0,0,,and if you're going to use tools it means you need a formal language
Dialogue: 0,0:06:37.51,0:06:40.29,Default,,0,0,0,,because tools don't understand prose
Dialogue: 0,0:06:40.62,0:06:42.78,Default,,0,0,0,,so how to write a spec
Dialogue: 0,0:06:43.11,0:06:45.66,Default,,0,0,0,,well writing requires thinking
Dialogue: 0,0:06:46.23,0:06:49.44,Default,,0,0,0,,so how to think about programs
Dialogue: 0,0:06:51.00,0:06:57.42,Default,,0,0,0,,we should think about programs like computer scientists namely like scientists
Dialogue: 0,0:06:58.68,0:07:04.50,Default,,0,0,0,,scientific thinking is a very successful way of thinking we know all that it's brought us
Dialogue: 0,0:07:04.62,0:07:09.75,Default,,0,0,0,,what science does is make mathematical models of reality
Dialogue: 0,0:07:10.83,0:07:15.78,Default,,0,0,0,,for example the first very successful science was astronomy
Dialogue: 0,0:07:17.16,0:07:22.83,Default,,0,0,0,,the reality planets have mountains oceans tides and weather
Dialogue: 0,0:07:22.51,0:07:24.84,Default,,0,0,0,,and all sorts of complicating things
Dialogue: 0,0:07:24.96,0:07:32.88,Default,,0,0,0,,but the simple model that's gotten astronomy pretty far
Dialogue: 0,0:07:32.68,0:07:39.12,Default,,0,0,0,,is to think of a planet model the planet as a point mass having position and momentum
Dialogue: 0,0:07:40.29,0:07:45.48,Default,,0,0,0,,computer science the reality consists of digital systems
Dialogue: 0,0:07:45.63,0:07:51.66,Default,,0,0,0,,things like a processor chip 、a game console or a computer executing a program
Dialogue: 0,0:07:53.37,0:07:57.48,Default,,0,0,0,,this is what I'll be talking about computer is executing programs
Dialogue: 0,0:07:57.75,0:08:03.18,Default,,0,0,0,,but what I have to say applies to all those other things just as well
Dialogue: 0,0:08:03.78,0:08:08.67,Default,,0,0,0,,so models there are lots of models that you've probably come across
Dialogue: 0,0:08:08.23,0:08:13.29,Default,,0,0,0,,Turing machines partially ordered set of events you probably haven't run across that
Dialogue: 0,0:08:13.30,0:08:23.37,Default,,0,0,0,,and lots of models but - to my mind stand out as being the most useful basic models
Dialogue: 0,0:08:24.15,0:08:28.05,Default,,0,0,0,,functions and sequences of states
Dialogue: 0,0:08:28.86,0:08:36.48,Default,,0,0,0,,so functions we model a function of a we can model a program as a function
Dialogue: 0,0:08:36.67,0:08:40.92,Default,,0,0,0,,that map's an input or to an output
Dialogue: 0,0:08:40.84,0:08:45.51,Default,,0,0,0,,or multiple inputs - or possible inputs to possible outputs
Dialogue: 0,0:08:46.01,0:08:48.46,Default,,0,0,0,,in math the function is very simple
Dialogue: 0,0:08:48.50,0:08:50.92,Default,,0,0,0,,it's an order as a set of ordered pairs
Dialogue: 0,0:08:50.45,0:08:55.48,Default,,0,0,0,,so for example the square function on natural numbers
Dialogue: 0,0:08:55.42,0:09:01.48,Default,,0,0,0,,it's this set of ordered pairs this pair 0-> 0 、1-> 1 、2-> 4 etc
Dialogue: 0,0:09:01.58,0:09:09.94,Default,,0,0,0,,and the element 2-> 4 is an element of this set of the fact that the outlet that
Dialogue: 0,0:09:09.47,0:09:15.85,Default,,0,0,0,,the pair 2-> 4 is an element of this square function is usually expressed
Dialogue: 0,0:09:16.01,0:09:18.91,Default,,0,0,0,,by saying square of 2 equals 4
Dialogue: 0,0:09:19.69,0:09:27.40,Default,,0,0,0,,now the domain of of square the domain of a function are all the first elements of those pairs
Dialogue: 0,0:09:27.29,0:09:33.85,Default,,0,0,0,,so for the square function the domain is the set number 0 1 2 & 3 etc
Dialogue: 0,0:09:33.94,0:09:38.77,Default,,0,0,0,,also known as the natural numbers that I like to write as n
Dialogue: 0,0:09:39.70,0:09:45.64,Default,,0,0,0,,to specify to define a function what you do is you specify its domain
Dialogue: 0,0:09:45.56,0:09:50.77,Default,,0,0,0,,so to specify square we say the domain of square is equal to the set of Naturals
Dialogue: 0,0:09:50.81,0:09:55.06,Default,,0,0,0,,and for each element X in its domain
Dialogue: 0,0:09:55.12,0:10:00.70,Default,,0,0,0,,we specify what Square maps X to
Dialogue: 0,0:10:00.53,0:10:03.67,Default,,0,0,0,,and it maps the value X to x squared
Dialogue: 0,0:10:03.59,0:10:06.79,Default,,0,0,0,,so that defines the square function
Dialogue: 0,0:10:07.42,0:10:13.33,Default,,0,0,0,,now functions in math are not the same as functions in programming languages
Dialogue: 0,0:10:13.45,0:10:15.37,Default,,0,0,0,,math is much simpler
Dialogue: 0,0:10:15.26,0:10:16.99,Default,,0,0,0,,I'm not a programming language expert
Dialogue: 0,0:10:17.24,0:10:22.03,Default,,0,0,0,,so I don't know what those things that programming languages
Dialogue: 0,0:10:22.04,0:10:23.29,Default,,0,0,0,,which is called functions are
Dialogue: 0,0:10:23.11,0:10:27.79,Default,,0,0,0,,but I know what math is that methods are a lot simpler
Dialogue: 0,0:10:28.18,0:10:32.56,Default,,0,0,0,,now the functions model will take you very far it's very useful
Dialogue: 0,0:10:32.66,0:10:34.24,Default,,0,0,0,,but there has limitations
Dialogue: 0,0:10:35.14,0:10:42.91,Default,,0,0,0,,its limitation main limitation is that it specifies what a program does but not how it does it
Dialogue: 0,0:10:43.06,0:10:48.46,Default,,0,0,0,,so for example quick sort and bubble sort compute the same function
Dialogue: 0,0:10:49.48,0:10:52.45,Default,,0,0,0,,but they're very different programs
Dialogue: 0,0:10:53.56,0:10:57.91,Default,,0,0,0,,also some programs don't just map inputs to outputs
Dialogue: 0,0:10:58.99,0:11:02.85,Default,,0,0,0,,some programs run forever well you know they may stop
Dialogue: 0,0:11:02.71,0:11:07.71,Default,,0,0,0,,before the the Sun explodes but it's useful to think of them it's running forever
Dialogue: 0,0:11:07.86,0:11:13.05,Default,,0,0,0,,for example operating systems you can't specify an operating system as a function
Dialogue: 0,0:11:13.09,0:11:15.45,Default,,0,0,0,,because it doesn't map inputs to outputs
Dialogue: 0,0:11:15.90,0:11:22.02,Default,,0,0,0,,so for that for those specifications use what I like to call
Dialogue: 0,0:11:21.67,0:11:23.73,Default,,0,0,0,,the standard behavioral model
Dialogue: 0,0:11:23.56,0:11:28.71,Default,,0,0,0,,in which a program execution is represented by a behavior
Dialogue: 0,0:11:29.02,0:11:33.90,Default,,0,0,0,,a behavior is a sequence of states
Dialogue: 0,0:11:33.70,0:11:38.91,Default,,0,0,0,,and a state is an assignment of values to variables
Dialogue: 0,0:11:39.18,0:11:44.40,Default,,0,0,0,,and a program is modeled by a set of behaviors
Dialogue: 0,0:11:44.28,0:11:49.22,Default,,0,0,0,,which behaviors that represent all possible executions of the program
Dialogue: 0,0:11:49.80,0:11:53.31,Default,,0,0,0,,so for example let's look at Euclid's algorithm
Dialogue: 0,0:11:53.17,0:11:56.73,Default,,0,0,0,,an algorithm is just an abstract program
Dialogue: 0,0:11:57.54,0:12:00.42,Default,,0,0,0,,as you all undoubtedly know
Dialogue: 0,0:12:00.13,0:12:05.94,Default,,0,0,0,,it computes the greatest common divisor of two natural of two integers m and n
Dialogue: 0,0:12:05.56,0:12:08.76,Default,,0,0,0,,by initializing x to m and y to m
Dialogue: 0,0:12:08.53,0:12:13.14,Default,,0,0,0,,and then it keeps subtracting the smaller from the larger
Dialogue: 0,0:12:12.79,0:12:17.70,Default,,0,0,0,,and when x and y are equal then it stops
Dialogue: 0,0:12:17.71,0:12:21.93,Default,,0,0,0,,because that x and y equals the GCD of M and n
Dialogue: 0,0:12:22.11,0:12:28.38,Default,,0,0,0,,so for M = 12 and N = 18 there's just one possible behavior
Dialogue: 0,0:12:28.33,0:12:34.50,Default,,0,0,0,,it starts with a state in which that assigns 12 to X and 18 to Y
Dialogue: 0,0:12:34.18,0:12:38.07,Default,,0,0,0,,and then subtract the next state is obtained by
Dialogue: 0,0:12:37.78,0:12:41.19,Default,,0,0,0,,subtracting the smaller one from the larger X from Y
Dialogue: 0,0:12:40.90,0:12:47.34,Default,,0,0,0,,so you get reach a state where x equals 12 and y equals 18 minus 12 or 6
Dialogue: 0,0:12:47.20,0:12:53.97,Default,,0,0,0,,and in the next state you subtract the smaller which is y from the larger and you wind up in the state
Dialogue: 0,0:12:53.74,0:12:56.34,Default,,0,0,0,,in which x equals 6 and y equals 6
Dialogue: 0,0:12:56.08,0:12:58.80,Default,,0,0,0,,and since x and y are equal you stop
Dialogue: 0,0:12:58.59,0:13:01.02,Default,,0,0,0,,so it's very simple algorithm
Dialogue: 0,0:13:00.88,0:13:03.45,Default,,0,0,0,,it has just one possible behavior
Dialogue: 0,0:13:04.35,0:13:07.56,Default,,0,0,0,,so how do we describe a set of behaviors
Dialogue: 0,0:13:08.52,0:13:10.80,Default,,0,0,0,,well first of all there's a theorem
Dialogue: 0,0:13:11.10,0:13:14.49,Default,,0,0,0,,that says any set B of behaviors
Dialogue: 0,0:13:14.56,0:13:20.19,Default,,0,0,0,,is the conjunct the intersection of two sets
Dialogue: 0,0:13:19.96,0:13:23.91,Default,,0,0,0,,a set of behaviors satisfying a safety property
Dialogue: 0,0:13:23.95,0:13:28.32,Default,,0,0,0,,and a set of behaviors satisfying a liveness property
Dialogue: 0,0:13:28.62,0:13:30.90,Default,,0,0,0,,so what our safety and liveness
Dialogue: 0,0:13:30.84,0:13:34.14,Default,,0,0,0,,well I'm not going to bother going into you know
Dialogue: 0,0:13:33.67,0:13:38.19,Default,,0,0,0,,the formal definitions but a safety property is false if and only if
Dialogue: 0,0:13:37.90,0:13:41.85,Default,,0,0,0,,it can be violated at some point during the behavior
Dialogue: 0,0:13:42.06,0:13:45.36,Default,,0,0,0,,so partial correctness is an example
Dialogue: 0,0:13:45.19,0:13:50.49,Default,,0,0,0,,partial correctness is violated if the program stops with the wrong answer
Dialogue: 0,0:13:50.26,0:13:53.64,Default,,0,0,0,,so that's some point in the behavior
Dialogue: 0,0:13:53.62,0:13:57.57,Default,,0,0,0,,you can tell that it that it the property was violated
Dialogue: 0,0:13:57.61,0:14:01.70,Default,,0,0,0,,the point at which the program stopped with the incorrect answer
Dialogue: 0,0:14:02.52,0:14:05.10,Default,,0,0,0,,the liveness property is one
Dialogue: 0,0:14:04.81,0:14:08.91,Default,,0,0,0,,in which you need to see the complete behavior in order to know if it's false
Dialogue: 0,0:14:08.68,0:14:13.53,Default,,0,0,0,,or if it's not satisfied by the by the program
Dialogue: 0,0:14:13.48,0:14:15.60,Default,,0,0,0,,classic example is termination
Dialogue: 0,0:14:15.82,0:14:18.57,Default,,0,0,0,,you can't tell that the program hasn't terminated
Dialogue: 0,0:14:18.91,0:14:21.99,Default,,0,0,0,,by looking at any finite piece of the program
Dialogue: 0,0:14:21.91,0:14:25.56,Default,,0,0,0,,you have to look at the entire behavior to know that it never terminates
Dialogue: 0,0:14:25.83,0:14:31.59,Default,,0,0,0,,so we satisfy specify a set of behaviors with by specifying a
Dialogue: 0,0:14:31.30,0:14:33.09,Default,,0,0,0,,safety property and aliveness property
Dialogue: 0,0:14:33.78,0:14:39.00,Default,,0,0,0,,now in practice specifying safety just turns out to be more important
Dialogue: 0,0:14:39.33,0:14:45.72,Default,,0,0,0,,because that's where errors are most likely to occur and tend to be more subtle
Dialogue: 0,0:14:45.64,0:14:48.84,Default,,0,0,0,,I mean liveness is important just not as important to safety
Dialogue: 0,0:14:48.76,0:14:52.49,Default,,0,0,0,,and so to save time I'm going to ignore aliveness today
Dialogue: 0,0:14:52.99,0:14:54.69,Default,,0,0,0,,and just talk about safety
Dialogue: 0,0:14:54.87,0:14:58.38,Default,,0,0,0,,so how to specify a safety property
Dialogue: 0,0:14:58.33,0:15:00.96,Default,,0,0,0,,we specify it with two things
Dialogue: 0,0:15:01.05,0:15:03.90,Default,,0,0,0,,the set of possible initial States
Dialogue: 0,0:15:03.88,0:15:06.54,Default,,0,0,0,,and the next state relation
Dialogue: 0,0:15:06.70,0:15:10.83,Default,,0,0,0,,which describes all possible successor states
Dialogue: 0,0:15:10.72,0:15:15.99,Default,,0,0,0,,of any state so what language should we use to write these things
Dialogue: 0,0:15:16.32,0:15:18.84,Default,,0,0,0,,well let's act like scientists
Dialogue: 0,0:15:18.88,0:15:22.41,Default,,0,0,0,,what language do mathema two scientists use
Dialogue: 0,0:15:22.09,0:15:24.24,Default,,0,0,0,,and the language is mathematics
Dialogue: 0,0:15:24.43,0:15:26.37,Default,,0,0,0,,that's the language of science
Dialogue: 0,0:15:26.26,0:15:29.94,Default,,0,0,0,,so the set of initial states they're described by a formula
Dialogue: 0,0:15:29.97,0:15:36.63,Default,,0,0,0,,so in Euclid's algorithm the set of initial States we initialize the initial state is one
Dialogue: 0,0:15:36.28,0:15:38.82,Default,,0,0,0,,in which X = M and Y = N
Dialogue: 0,0:15:38.50,0:15:42.93,Default,,0,0,0,,so that is specified that initial state is specified by this formula
Dialogue: 0,0:15:43.29,0:15:50.73,Default,,0,0,0,,and the only part this has only one it's only one possible initial state that satisfies that formula
Dialogue: 0,0:15:51.81,0:15:55.74,Default,,0,0,0,,the next state relation is also described by a formula
Dialogue: 0,0:15:55.81,0:15:58.32,Default,,0,0,0,,and to describe it
Dialogue: 0,0:15:58.06,0:16:05.64,Default,,0,0,0,,I'll use unprimed variables to talk about the current state or the first state of the pair
Dialogue: 0,0:16:05.38,0:16:08.97,Default,,0,0,0,,and prime variables we're talking about the next state
Dialogue: 0,0:16:08.94,0:16:12.99,Default,,0,0,0,,so let's look at the next state relation for Euclid's algorithm
Dialogue: 0,0:16:12.82,0:16:14.52,Default,,0,0,0,,there are two possibilities
Dialogue: 0,0:16:14.56,0:16:18.24,Default,,0,0,0,,either X is greater than Y or Y is greater than X
Dialogue: 0,0:16:18.04,0:16:21.15,Default,,0,0,0,,so that formula is going to be the
Dialogue: 0,0:16:20.86,0:16:23.01,Default,,0,0,0,,disjunction of two of two formulas
Dialogue: 0,0:16:24.27,0:16:30.27,Default,,0,0,0,,if X is greater than Y then the new value of x prime
Dialogue: 0,0:16:30.57,0:16:35.25,Default,,0,0,0,,is equal to what you get by subtracting Y from it
Dialogue: 0,0:16:34.96,0:16:39.15,Default,,0,0,0,,so it's new value of x prime is equal to the old value of
Dialogue: 0,0:16:38.68,0:16:40.74,Default,,0,0,0,,X minus the old value of y
Dialogue: 0,0:16:40.57,0:16:45.21,Default,,0,0,0,,and the new value of X of Y is equal to the old value
Dialogue: 0,0:16:45.42,0:16:52.83,Default,,0,0,0,,so that first formula is specified by all pairs of states satisfying X
Dialogue: 0,0:16:52.66,0:16:55.14,Default,,0,0,0,,greater than Y and in the initial state
Dialogue: 0,0:16:55.15,0:16:57.84,Default,,0,0,0,,in first state X prime equals x minus y
Dialogue: 0,0:16:57.85,0:17:02.45,Default,,0,0,0,,and y prime equals y were okay
Dialogue: 0,0:17:02.95,0:17:05.55,Default,,0,0,0,,you understand what what I said
Dialogue: 0,0:17:05.55,0:17:08.70,Default,,0,0,0,,and that describes one one possibility
Dialogue: 0,0:17:08.71,0:17:12.00,Default,,0,0,0,,or the disjunction of these formulas to the other case
Dialogue: 0,0:17:11.80,0:17:16.29,Default,,0,0,0,,it's or what Y is greater than X in the first state
Dialogue: 0,0:17:16.09,0:17:20.49,Default,,0,0,0,,and the value of y the new state and the value of y in the old state minus
Dialogue: 0,0:17:20.56,0:17:22.50,Default,,0,0,0,,the value of x in the old state etc
Dialogue: 0,0:17:22.38,0:17:28.11,Default,,0,0,0,,so this simple formula describes the next state ratio relation of Euclid's algorithm
Dialogue: 0,0:17:28.14,0:17:31.68,Default,,0,0,0,,so let's see how it works
Dialogue: 0,0:17:31.59,0:17:35.34,Default,,0,0,0,,how you get behaviors out of those two formulas
Dialogue: 0,0:17:36.00,0:17:41.54,Default,,0,0,0,,well for example for an example I'll take em equal to 12 and N equals 18
Dialogue: 0,0:17:41.72,0:17:46.21,Default,,0,0,0,,so to get the initial state we look at the initial predicate s-- predicate
Dialogue: 0,0:17:46.71,0:17:52.70,Default,,0,0,0,,and we substitute 12 for m and 18 for n
Dialogue: 0,0:17:52.35,0:17:55.76,Default,,0,0,0,,for what for n rather and you see you under
Dialogue: 0,0:17:55.44,0:18:00.29,Default,,0,0,0,,that substitution there's only one pair of values x and y that satisfy this
Dialogue: 0,0:17:59.85,0:18:02.42,Default,,0,0,0,,relation x equals 12 and y equals 18
Dialogue: 0,0:18:03.77,0:18:07.34,Default,,0,0,0,,so to get the next state the second state
Dialogue: 0,0:18:07.05,0:18:09.56,Default,,0,0,0,,we apply the next state look formula
Dialogue: 0,0:18:10.37,0:18:14.03,Default,,0,0,0,,substituting 12 for x and 18 for y
Dialogue: 0,0:18:13.71,0:18:21.98,Default,,0,0,0,,and we do that notice that 12 greater than 18 is false and 18 greater than 12 is true
Dialogue: 0,0:18:21.86,0:18:27.74,Default,,0,0,0,,we'll false and anything is false so that first half of the formula is false
Dialogue: 0,0:18:27.98,0:18:32.12,Default,,0,0,0,,true in anything is people to the rest of the formula
Dialogue: 0,0:18:32.15,0:18:39.26,Default,,0,0,0,,so this formula is satisfied by the old value of x being 12
Dialogue: 0,0:18:39.18,0:18:44.06,Default,,0,0,0,,and the new value of x being 18 minus 12 or 6
Dialogue: 0,0:18:44.63,0:18:52.85,Default,,0,0,0,,so this is the only possible next state that satisfies this next relation
Dialogue: 0,0:18:52.94,0:18:57.83,Default,,0,0,0,,when for the initial state x equals 12 and y equals 18
Dialogue: 0,0:18:58.79,0:19:03.47,Default,,0,0,0,,okay to find the next state we do the same thing we
Dialogue: 0,0:19:03.66,0:19:07.09,Default,,0,0,0,,substitute 12 for X and wife and 6 for y
Dialogue: 0,0:19:07.10,0:19:14.54,Default,,0,0,0,,we simplify we see that 6 greater than 12 is false and 12 greater than 6 is true
Dialogue: 0,0:19:14.37,0:19:21.14,Default,,0,0,0,,so the formula simplifies to x prime equals 12 minus 6 and y prime equals 6
Dialogue: 0,0:19:22.37,0:19:26.93,Default,,0,0,0,,so it tells us that the only possible successor state
Dialogue: 0,0:19:26.73,0:19:34.10,Default,,0,0,0,,the only possible third state is x equals 6 and y equals 6 and to find the next state
Dialogue: 0,0:19:33.84,0:19:40.19,Default,,0,0,0,,well do the same thing we substitute 6 for X and 6 for y and we see
Dialogue: 0,0:19:39.93,0:19:42.95,Default,,0,0,0,,that the entire formula is false
Dialogue: 0,0:19:42.78,0:19:48.71,Default,,0,0,0,,and there are no values of x prime and y prime which can make the formula false true
Dialogue: 0,0:19:49.53,0:19:51.14,Default,,0,0,0,,so there is no next state
Dialogue: 0,0:19:50.85,0:19:54.56,Default,,0,0,0,,so there's no next state means the program is stopped
Dialogue: 0,0:19:54.86,0:19:57.23,Default,,0,0,0,,so that's Euclid's algorithm
Dialogue: 0,0:19:57.77,0:20:03.38,Default,,0,0,0,,and when we see special about Euclid's algorithm is for any values of x and y
Dialogue: 0,0:20:03.03,0:20:06.50,Default,,0,0,0,,there are unique values of x prime and y prime
Dialogue: 0,0:20:06.24,0:20:08.09,Default,,0,0,0,,that make next true
Dialogue: 0,0:20:07.95,0:20:10.82,Default,,0,0,0,,there's either one value or no values
Dialogue: 0,0:20:11.39,0:20:14.09,Default,,0,0,0,,so Euclid's algorithm is deterministic
Dialogue: 0,0:20:14.54,0:20:16.82,Default,,0,0,0,,to model their non determinism
Dialogue: 0,0:20:17.30,0:20:20.06,Default,,0,0,0,,we just have a next state relation
Dialogue: 0,0:20:20.19,0:20:23.54,Default,,0,0,0,,that allows multiple next States for a current state
Dialogue: 0,0:20:23.25,0:20:26.39,Default,,0,0,0,,there's nothing magic you know terribly difficult
Dialogue: 0,0:20:26.10,0:20:29.51,Default,,0,0,0,,you know hard about can about non determinism
Dialogue: 0,0:20:30.50,0:20:33.44,Default,,0,0,0,,multiple assignments of values to prime variables
Dialogue: 0,0:20:33.57,0:20:38.30,Default,,0,0,0,,that make next true for a single assignment of values to unprimed variables
Dialogue: 0,0:20:38.31,0:20:41.09,Default,,0,0,0,,that's what non determinism is all about
Dialogue: 0,0:20:41.27,0:20:43.67,Default,,0,0,0,,okay what about formal specs
Dialogue: 0,0:20:44.06,0:20:48.38,Default,,0,0,0,,we need formal specifications only to apply tools
Dialogue: 0,0:20:48.45,0:20:53.33,Default,,0,0,0,,we mathematicians you know before there were any tools you know wrote math
Dialogue: 0,0:20:53.19,0:20:55.55,Default,,0,0,0,,you know very you know an informal notation
Dialogue: 0,0:20:55.62,0:21:00.44,Default,,0,0,0,,they want to use Mathematica though they have to you know write in the language Mathematica
Dialogue: 0,0:21:00.63,0:21:04.64,Default,,0,0,0,,so if we want to apply of tools we need a formal language
Dialogue: 0,0:21:04.29,0:21:07.64,Default,,0,0,0,,and the language that I'm going to describe were
Dialogue: 0,0:21:07.50,0:21:09.74,Default,,0,0,0,,I use is called TLA plus
Dialogue: 0,0:21:09.92,0:21:18.89,Default,,0,0,0,,so this this pair of formulas are written just like this in TLA plus
Dialogue: 0,0:21:20.12,0:21:25.52,Default,,0,0,0,,we need to form a language we need to write declarations
Dialogue: 0,0:21:25.80,0:21:29.72,Default,,0,0,0,,we declare m and n to be constants and x and y to be variables
Dialogue: 0,0:21:30.20,0:21:35.33,Default,,0,0,0,,and then add a little boilerplate we said it extends the integers
Dialogue: 0,0:21:35.43,0:21:41.24,Default,,0,0,0,,the integer or a standard module that defines things like plus and minus and greater than
Dialogue: 0,0:21:40.83,0:21:44.87,Default,,0,0,0,,and we put them inside of a module which I've called module Euclid
Dialogue: 0,0:21:44.76,0:21:48.62,Default,,0,0,0,,and that's a TL A+ specification of Euclid's algorithm
Dialogue: 0,0:21:48.39,0:21:50.99,Default,,0,0,0,,and this is what it looks like in SK
Dialogue: 0,0:21:53.39,0:21:57.14,Default,,0,0,0,,now you can model check TLA plus specs
Dialogue: 0,0:21:57.20,0:22:08.25,Default,,0,0,0,,know model checking conceptually checks all possible confusions of the program on a very small model
Dialogue: 0,0:22:10.83,0:22:16.92,Default,,0,0,0,,it's extremely effective and quite easy to do
Dialogue: 0,0:22:16.89,0:22:21.21,Default,,0,0,0,,you know you basically tell the model checker what the model is
Dialogue: 0,0:22:20.86,0:22:24.54,Default,,0,0,0,,models are usually you know instantiating values of constants
Dialogue: 0,0:22:24.52,0:22:27.63,Default,,0,0,0,,so for Euclid's algorithm we'd have to tell it what m and n equals
Dialogue: 0,0:22:27.49,0:22:29.82,Default,,0,0,0,,and then the model checker will go through
Dialogue: 0,0:22:29.65,0:22:32.43,Default,,0,0,0,,and in you know a few nanoseconds
Dialogue: 0,0:22:32.65,0:22:37.59,Default,,0,0,0,,for something that simple will we'll check whoa b1 possible
Dialogue: 0,0:22:37.60,0:22:42.45,Default,,0,0,0,,their behavior and you can write formal correctness proofs
Dialogue: 0,0:22:42.58,0:22:44.76,Default,,0,0,0,,and check them mechanically in TLA
Dialogue: 0,0:22:44.80,0:22:48.60,Default,,0,0,0,,you know write the proofs in TLA plus
Dialogue: 0,0:22:48.37,0:22:51.69,Default,,0,0,0,,and we have a theorem prover that can check the proofs
Dialogue: 0,0:22:51.43,0:22:56.61,Default,,0,0,0,,and that's hard work and well all this is math stuff
Dialogue: 0,0:22:56.47,0:23:00.12,Default,,0,0,0,,we know he's you know it's really very well nice and pretty stuff
Dialogue: 0,0:23:00.01,0:23:02.79,Default,,0,0,0,,but we know that math works only for toy examples
Dialogue: 0,0:23:02.92,0:23:06.90,Default,,0,0,0,,to model real system you need a real language
Dialogue: 0,0:23:07.06,0:23:10.59,Default,,0,0,0,,with types procedures objects and all of that
Dialogue: 0,0:23:10.47,0:23:19.53,Default,,0,0,0,,ma'am wrong let me quote something written by Chris Newcomb as an Amazon engineer
Dialogue: 0,0:23:20.16,0:23:26.55,Default,,0,0,0,,said we have used TL A+ on 10 large complex real-world systems
Dialogue: 0,0:23:26.92,0:23:31.68,Default,,0,0,0,,in every case TL A+ has added significant value
Dialogue: 0,0:23:31.62,0:23:37.56,Default,,0,0,0,,either preventing subtle serious bugs from reaching production
Dialogue: 0,0:23:38.58,0:23:43.08,Default,,0,0,0,,or giving us enough understanding and confidence
Dialogue: 0,0:23:42.88,0:23:48.81,Default,,0,0,0,,to make aggressive performance optimizations without sacrificing correctness
Dialogue: 0,0:23:48.87,0:23:52.95,Default,,0,0,0,,one of the other things people will tell you about formal methods is
Dialogue: 0,0:23:52.63,0:23:55.65,Default,,0,0,0,,oh if you use a formal method you're really going to kill your performance
Dialogue: 0,0:23:55.75,0:23:57.96,Default,,0,0,0,,well in fact it's just the opposite
Dialogue: 0,0:23:58.32,0:24:02.85,Default,,0,0,0,,and the other thing they'll tell you is Oh management will never let us do it
Dialogue: 0,0:24:02.65,0:24:08.82,Default,,0,0,0,,well management at Amazon and now encouraging teams to write TL a-plus specs
Dialogue: 0,0:24:09.21,0:24:16.33,Default,,0,0,0,,and in annual planning managers are allocating engineering time to use TLA Plus
Dialogue: 0,0:24:17.11,0:24:21.31,Default,,0,0,0,,this was written in 2013 I think there are a few more systems
Dialogue: 0,0:24:21.23,0:24:23.41,Default,,0,0,0,,that they've been specifying since then
Dialogue: 0,0:24:23.71,0:24:26.89,Default,,0,0,0,,the xbox360 memory system
Dialogue: 0,0:24:26.89,0:24:36.82,Default,,0,0,0,,a Chuck Thacker had an intern right at TLA plus spec of the Xbox memory system
Dialogue: 0,0:24:36.74,0:24:41.98,Default,,0,0,0,,and just writing the spec didn't even get to point of model checking it
Dialogue: 0,0:24:41.87,0:24:49.09,Default,,0,0,0,,he caught a bug that the designers of the memory system at IBM
Dialogue: 0,0:24:49.13,0:24:53.17,Default,,0,0,0,,after scratching their heads looking at it said yeah that was a bug
Dialogue: 0,0:24:52.97,0:24:57.01,Default,,0,0,0,,and that would not have been caught by their testing procedures
Dialogue: 0,0:24:57.08,0:25:03.91,Default,,0,0,0,,and that bug would have caused every Xbox in the world to crash after four hours of use
Dialogue: 0,0:25:05.26,0:25:08.38,Default,,0,0,0,,you can learn about TLA plus on the web
Dialogue: 0,0:25:08.62,0:25:12.22,Default,,0,0,0,,today I'm not going to be talking about TLA plus
Dialogue: 0,0:25:11.99,0:25:14.50,Default,,0,0,0,,I'm going to be talking about informal specifications
Dialogue: 0,0:25:14.87,0:25:16.96,Default,,0,0,0,,and I'll start with an example
Dialogue: 0,0:25:18.52,0:25:22.63,Default,,0,0,0,,TLA Tech which is the pretty printer for TL A+
Dialogue: 0,0:25:23.71,0:25:27.85,Default,,0,0,0,,here is what somebody user TL A+ user might write
Dialogue: 0,0:25:28.87,0:25:31.48,Default,,0,0,0,,some silly formula like this
Dialogue: 0,0:25:31.25,0:25:33.58,Default,,0,0,0,,and if you just did the naive output
Dialogue: 0,0:25:33.62,0:25:42.67,Default,,0,0,0,,just took things from teletype font and put them into translated the ascii into the symbols
Dialogue: 0,0:25:42.62,0:25:45.67,Default,,0,0,0,,left / right / into the conjunction symbol
Dialogue: 0,0:25:45.62,0:25:50.14,Default,,0,0,0,,and you get something like that formula and the right
Dialogue: 0,0:25:50.35,0:25:56.38,Default,,0,0,0,,but alignment is actually has significance in TL a-plus
Dialogue: 0,0:25:56.50,0:26:03.76,Default,,0,0,0,,and the user undoubtedly wanted he certainly wanted the left conjunction symbols aligned
Dialogue: 0,0:26:03.62,0:26:06.64,Default,,0,0,0,,because the formula might mean something different otherwise
Dialogue: 0,0:26:06.68,0:26:09.73,Default,,0,0,0,,and he also probably wanted those equal signs aligned
Dialogue: 0,0:26:10.81,0:26:15.97,Default,,0,0,0,,so this is the right output that the pretty partition produce for this example
Dialogue: 0,0:26:16.39,0:26:19.12,Default,,0,0,0,,on the other hand if you look at this input
Dialogue: 0,0:26:19.48,0:26:22.72,Default,,0,0,0,,this is what the naive output would be like
Dialogue: 0,0:26:22.55,0:26:27.16,Default,,0,0,0,,and the user probably didn't want those two symbols aligned
Dialogue: 0,0:26:27.20,0:26:29.17,Default,,0,0,0,,that was probably just an accidental
Dialogue: 0,0:26:30.05,0:26:35.20,Default,,0,0,0,,so in this case the naive output is the correct output that's what you want
Dialogue: 0,0:26:35.53,0:26:40.54,Default,,0,0,0,,well there's no precise definition of correct alignment
Dialogue: 0,0:26:40.76,0:26:43.24,Default,,0,0,0,,correctness means what the user wants
Dialogue: 0,0:26:43.10,0:26:46.57,Default,,0,0,0,,and there's no way of formally specifying what the user wants
Dialogue: 0,0:26:48.07,0:26:53.01,Default,,0,0,0,,so obviously if we can specify correctness specification
Dialogue: 0,0:26:53.51,0:26:56.23,Default,,0,0,0,,what good can specification we need to specify correctness
Dialogue: 0,0:26:56.27,0:26:57.94,Default,,0,0,0,,what could how can we use specification
Dialogue: 0,0:26:58.30,0:27:00.16,Default,,0,0,0,,well we can
Dialogue: 0,0:27:00.88,0:27:07.39,Default,,0,0,0,,not knowing what a program should do doesn't mean you don't have to think you just do this code
Dialogue: 0,0:27:07.19,0:27:09.88,Default,,0,0,0,,it means you have to think a lot harder
Dialogue: 0,0:27:11.38,0:27:16.00,Default,,0,0,0,,which means that that's what a spec is even more important
Dialogue: 0,0:27:16.10,0:27:19.45,Default,,0,0,0,,when you don't know what the program is supposed to do
Dialogue: 0,0:27:19.13,0:27:22.78,Default,,0,0,0,,and it seems impossible to even say what it should do
Dialogue: 0,0:27:22.52,0:27:26.20,Default,,0,0,0,,because it has to do something and you have to decide what it should do
Dialogue: 0,0:27:25.88,0:27:28.84,Default,,0,0,0,,so that requires a lot of thinking which requires writing
Dialogue: 0,0:27:29.29,0:27:31.75,Default,,0,0,0,,so what did I do
Dialogue: 0,0:27:32.41,0:27:38.05,Default,,0,0,0,,well my spec consisted of six rules plus definitions
Dialogue: 0,0:27:38.36,0:27:43.90,Default,,0,0,0,,and these are in informal met you know quote mathematical prose
Dialogue: 0,0:27:43.64,0:27:45.91,Default,,0,0,0,,and formal if they're written in comments
Dialogue: 0,0:27:45.89,0:27:48.49,Default,,0,0,0,,oh here's an example of one of the rules
Dialogue: 0,0:27:48.20,0:27:53.71,Default,,0,0,0,,it says a left comment token is left comment aligned with its covering token
Dialogue: 0,0:27:53.60,0:27:56.62,Default,,0,0,0,,well I don't even know what that means anymore
Dialogue: 0,0:27:56.27,0:27:58.09,Default,,0,0,0,,I'd have to read the spec
Dialogue: 0,0:27:57.86,0:28:01.57,Default,,0,0,0,,but left comment aligned and covering token are terms
Dialogue: 0,0:28:01.46,0:28:07.09,Default,,0,0,0,,that were defined in the in this specification I wrote
Dialogue: 0,0:28:06.80,0:28:12.10,Default,,0,0,0,,and if you look at it this is really mathematical prose
Dialogue: 0,0:28:13.18,0:28:22.24,Default,,0,0,0,,what did I write this spec well it was a lot easier to understand and debug six rules
Dialogue: 0,0:28:22.30,0:28:28.75,Default,,0,0,0,,than 850 lines of code probably would have been more than 850 lines of code
Dialogue: 0,0:28:28.46,0:28:30.13,Default,,0,0,0,,if I hadn't written those rules first
Dialogue: 0,0:28:30.19,0:28:33.04,Default,,0,0,0,,and I did a lot of debugging of the rules
Dialogue: 0,0:28:33.73,0:28:36.79,Default,,0,0,0,,you know you write a bunch of rules
Dialogue: 0,0:28:36.56,0:28:39.13,Default,,0,0,0,,and you know what they're going to do is not obvious
Dialogue: 0,0:28:39.20,0:28:44.32,Default,,0,0,0,,and you try a bunch of examples and I a debugging code
Dialogue: 0,0:28:44.18,0:28:46.90,Default,,0,0,0,,so I could see what rules were being applied
Dialogue: 0,0:28:46.70,0:28:52.21,Default,,0,0,0,,and we don't would do with something weird and I say oh and that rule needs to be modified
Dialogue: 0,0:28:52.16,0:28:54.79,Default,,0,0,0,,for this and an iterative process
Dialogue: 0,0:28:54.59,0:29:01.03,Default,,0,0,0,,and the few bugs and implementing the rules were easy to catch
Dialogue: 0,0:29:00.74,0:29:02.35,Default,,0,0,0,,though there was no problem
Dialogue: 0,0:29:03.10,0:29:05.56,Default,,0,0,0,,had I just written the code
Dialogue: 0,0:29:05.33,0:29:11.11,Default,,0,0,0,,it would have taken me much longer to just get something I could live with
Dialogue: 0,0:29:10.85,0:29:15.64,Default,,0,0,0,,and I'm sure the results wouldn't have produced formatting nearly as good
Dialogue: 0,0:29:16.12,0:29:20.17,Default,,0,0,0,,so why not a formal spec why didn't I write at TLA + spec
Dialogue: 0,0:29:20.08,0:29:22.24,Default,,0,0,0,,well several reasons
Dialogue: 0,0:29:22.13,0:29:24.52,Default,,0,0,0,,first of all getting it right was not that important
Dialogue: 0,0:29:24.56,0:29:26.74,Default,,0,0,0,,the world is not going to come crashing
Dialogue: 0,0:29:26.75,0:29:30.31,Default,,0,0,0,,down if something isn't quite properly aligned and pretty printing
Dialogue: 0,0:29:30.61,0:29:34.33,Default,,0,0,0,,in particular it didn't have to work in all corner cases
Dialogue: 0,0:29:34.04,0:29:37.81,Default,,0,0,0,,yes No you know there's no way of getting it you know totally right
Dialogue: 0,0:29:37.72,0:29:42.04,Default,,0,0,0,,and just as important there aren't any tools
Dialogue: 0,0:29:41.99,0:29:45.73,Default,,0,0,0,,that could help me the model checker wouldn't have helped in this example
Dialogue: 0,0:29:45.68,0:29:49.96,Default,,0,0,0,,because you know you need some some properties to check it against
Dialogue: 0,0:29:49.91,0:29:54.91,Default,,0,0,0,,and you know they're just tools were not
Dialogue: 0,0:29:54.62,0:29:59.71,Default,,0,0,0,,you know the TLA plus tools are not designed for that kind of problems
Dialogue: 0,0:29:59.66,0:30:02.17,Default,,0,0,0,,so what's typical about this spec
Dialogue: 0,0:30:02.23,0:30:05.95,Default,,0,0,0,,the spec is at a higher level than the code
Dialogue: 0,0:30:06.07,0:30:09.25,Default,,0,0,0,,it could have been implemented in any language
Dialogue: 0,0:30:10.57,0:30:17.62,Default,,0,0,0,,no method nor tool none of your favorite ways of you know programming methodologies
Dialogue: 0,0:30:18.22,0:30:21.19,Default,,0,0,0,,would have been worth a damn here
Dialogue: 0,0:30:21.17,0:30:24.10,Default,,0,0,0,,they would not have helped me write the spec
Dialogue: 0,0:30:24.67,0:30:31.42,Default,,0,0,0,,because no method of writing you know better code
Dialogue: 0,0:30:31.28,0:30:33.34,Default,,0,0,0,,would have made the spec unnecessary
Dialogue: 0,0:30:33.80,0:30:37.54,Default,,0,0,0,,I had to write the spec it was not code
Dialogue: 0,0:30:37.45,0:30:45.46,Default,,0,0,0,,and it says nothing about how to write the code you could implement my spec in any language
Dialogue: 0,0:30:45.50,0:30:53.47,Default,,0,0,0,,you write a spec to help you think about the problem before you think about the code
Dialogue: 0,0:30:54.62,0:30:57.44,Default,,0,0,0,,so what's not typical about this spec
Dialogue: 0,0:30:57.45,0:30:58.85,Default,,0,0,0,,it's quite subtle
Dialogue: 0,0:30:59.01,0:31:04.55,Default,,0,0,0,,remember I said 95% of code people write requires less thought
Dialogue: 0,0:31:04.38,0:31:08.06,Default,,0,0,0,,and you know simpler shorter specs good enough
Dialogue: 0,0:31:08.33,0:31:10.43,Default,,0,0,0,,also it's a set of rules
Dialogue: 0,0:31:10.17,0:31:15.44,Default,,0,0,0,,a set of rules or requirements or axioms is usually a bad spec
Dialogue: 0,0:31:15.39,0:31:17.48,Default,,0,0,0,,because it's really hard to understand
Dialogue: 0,0:31:17.55,0:31:21.68,Default,,0,0,0,,it turns out that that was a good match for this particular problem
Dialogue: 0,0:31:21.66,0:31:28.01,Default,,0,0,0,,which says there are no universal rules about how to write specs
Dialogue: 0,0:31:30.33,0:31:34.76,Default,,0,0,0,,no universal rules that'll tell you how to write any program in the world
Dialogue: 0,0:31:35.12,0:31:38.21,Default,,0,0,0,,so specifying how to compute a function
Dialogue: 0,0:31:39.53,0:31:42.44,Default,,0,0,0,,specifying what the pretty printer should do is hard
Dialogue: 0,0:31:43.73,0:31:45.83,Default,,0,0,0,,implementing the spec was easy
Dialogue: 0,0:31:47.57,0:31:51.05,Default,,0,0,0,,specifying what a sorting program should do is easy
Dialogue: 0,0:31:51.50,0:31:55.28,Default,,0,0,0,,figuring out how to implement it efficiently is hard
Dialogue: 0,0:31:55.11,0:31:57.20,Default,,0,0,0,,at least if nobody has showed you how
Dialogue: 0,0:31:58.46,0:32:03.11,Default,,0,0,0,,it requires thinking which requires writing a specification
Dialogue: 0,0:32:03.77,0:32:07.94,Default,,0,0,0,,so I'll give you an example of a specification for quicksort
Dialogue: 0,0:32:09.38,0:32:11.36,Default,,0,0,0,,probably you all seen quicksort
Dialogue: 0,0:32:11.37,0:32:15.71,Default,,0,0,0,,quicksort is written by Tony Hoare it's a divide-and-conquer algorithm
Dialogue: 0,0:32:15.75,0:32:16.88,Default,,0,0,0,,for sorting an array
Dialogue: 0,0:32:16.65,0:32:19.88,Default,,0,0,0,,call it a zero to a n minus one
Dialogue: 0,0:32:19.59,0:32:22.61,Default,,0,0,0,,and for simplicity I'll assume that's an array of numbers
Dialogue: 0,0:32:22.64,0:32:27.92,Default,,0,0,0,,and it uses a partition procedure you give it two arguments low and high
Dialogue: 0,0:32:27.57,0:32:33.26,Default,,0,0,0,,and what that procedure does is it chooses a pivot point
Dialogue: 0,0:32:32.84,0:32:36.29,Default,,0,0,0,,pivot number in low to high minus 1
Dialogue: 0,0:32:36.03,0:32:42.26,Default,,0,0,0,,and then it permutes the elements to the left of the pivot a low to a high
Dialogue: 0,0:32:43.70,0:32:52.10,Default,,0,0,0,,it permutes the number the the part of the array within the limit from low to high
Dialogue: 0,0:32:52.19,0:32:56.15,Default,,0,0,0,,so that everything from pivot downwards
Dialogue: 0,0:32:56.49,0:33:00.68,Default,,0,0,0,,is becomes is less than or equal to
Dialogue: 0,0:33:00.69,0:33:03.08,Default,,0,0,0,,everything from pivot plus 1 upwards
Dialogue: 0,0:33:04.19,0:33:08.00,Default,,0,0,0,,so fortunately if well seen quick sort before
Dialogue: 0,0:33:07.92,0:33:11.75,Default,,0,0,0,,so i rambling description isn't necessary
Dialogue: 0,0:33:12.11,0:33:17.00,Default,,0,0,0,,and for this example I don't care how this procedure is implemented
Dialogue: 0,0:33:17.01,0:33:19.91,Default,,0,0,0,,of course that's the real trick of quicksort implementing
Dialogue: 0,0:33:20.01,0:33:23.96,Default,,0,0,0,,that but you know I only have 50 minutes here so
Dialogue: 0,0:33:23.93,0:33:26.57,Default,,0,0,0,,so let's specify quicksort and pseudocode
Dialogue: 0,0:33:27.26,0:33:33.29,Default,,0,0,0,,you know this by the partition procedure is pick a pivot and low-to-high -1 and
Dialogue: 0,0:33:33.09,0:33:35.39,Default,,0,0,0,,permute a low to a high to make bla bla
Dialogue: 0,0:33:35.40,0:33:37.40,Default,,0,0,0,,bla and return the value pivot
Dialogue: 0,0:33:38.15,0:33:43.67,Default,,0,0,0,,and you have a recursive procedure q s applied to low to high
Dialogue: 0,0:33:43.68,0:33:45.71,Default,,0,0,0,,and if low is less than high
Dialogue: 0,0:33:45.71,0:33:50.99,Default,,0,0,0,,you call the protection procedure for on low and high
Dialogue: 0,0:33:50.64,0:33:56.26,Default,,0,0,0,,and then you recursively call the procedure for the 2 subintervals
Dialogue: 0,0:33:57.68,0:34:03.83,Default,,0,0,0,,and if low is not less than high then it means you have one element
Dialogue: 0,0:34:03.89,0:34:07.58,Default,,0,0,0,,and there's nothing to sort and so you're done
Dialogue: 0,0:34:07.26,0:34:14.15,Default,,0,0,0,,and the main program just implies Q s to the entire array from Sirte and minus one
Dialogue: 0,0:34:14.30,0:34:21.29,Default,,0,0,0,,so informal no formal syntax no declarations pseudocode
Dialogue: 0,0:34:21.57,0:34:25.55,Default,,0,0,0,,it's it's a fine specification yeah when
Dialogue: 0,0:34:25.14,0:34:28.04,Default,,0,0,0,,you're gonna code you know pretty trivial to code from this
Dialogue: 0,0:34:27.69,0:34:29.84,Default,,0,0,0,,and you know any programming language
Dialogue: 0,0:34:30.11,0:34:31.82,Default,,0,0,0,,easy to understand
Dialogue: 0,0:34:32.48,0:34:34.67,Default,,0,0,0,,but it's a really quick sort
Dialogue: 0,0:34:35.39,0:34:38.48,Default,,0,0,0,,it's the way quicksort is almost always described
Dialogue: 0,0:34:39.71,0:34:44.18,Default,,0,0,0,,but recursion is not a form fundamental part of quicksort
Dialogue: 0,0:34:44.33,0:34:48.32,Default,,0,0,0,,it's just one way of implementing divide and conquer
Dialogue: 0,0:34:48.21,0:34:50.09,Default,,0,0,0,,now here's a problem
Dialogue: 0,0:34:49.83,0:34:52.79,Default,,0,0,0,,and in fact it's probably not the best way
Dialogue: 0,0:34:52.74,0:34:56.87,Default,,0,0,0,,if you want to execute this on multiple cores
Dialogue: 0,0:34:56.96,0:35:00.59,Default,,0,0,0,,so here's a problem give to your friends and colleagues
Dialogue: 0,0:35:00.35,0:35:04.07,Default,,0,0,0,,write a non recursive version of quicksort
Dialogue: 0,0:35:05.06,0:35:07.76,Default,,0,0,0,,almost no one can do it in ten minutes
Dialogue: 0,0:35:07.79,0:35:11.21,Default,,0,0,0,,they try to compile the recursive version
Dialogue: 0,0:35:11.16,0:35:12.53,Default,,0,0,0,,and nobody can get
Dialogue: 0,0:35:12.18,0:35:15.74,Default,,0,0,0,,almost nobody can get that right and ten minutes standing on their feet
Dialogue: 0,0:35:16.46,0:35:20.06,Default,,0,0,0,,but I'll tell you you know what the real solution is
Dialogue: 0,0:35:21.12,0:35:25.04,Default,,0,0,0,,we do is maintain a set u of index ranges
Dialogue: 0,0:35:25.05,0:35:27.89,Default,,0,0,0,,on which partition needs to be called
Dialogue: 0,0:35:28.55,0:35:35.09,Default,,0,0,0,,initially u equals contain is a set containing a single index range
Dialogue: 0,0:35:34.80,0:35:37.52,Default,,0,0,0,,from zero and minus one represented by this pair
Dialogue: 0,0:35:37.91,0:35:40.34,Default,,0,0,0,,now we can write this in pseudocode
Dialogue: 0,0:35:40.74,0:35:47.15,Default,,0,0,0,,but let's be scientists let's write init and next directly in mathematics
Dialogue: 0,0:35:47.63,0:35:49.70,Default,,0,0,0,,so the initial predicate
Dialogue: 0,0:35:50.27,0:35:54.74,Default,,0,0,0,,says a is equal to any array of numbers of length n
Dialogue: 0,0:35:54.48,0:35:59.57,Default,,0,0,0,,and u is equal to the set consisting of that single element
Dialogue: 0,0:35:59.96,0:36:05.60,Default,,0,0,0,,yep this is in formal mathematics but it's informal you know
Dialogue: 0,0:36:05.22,0:36:12.08,Default,,0,0,0,,we could write some formal way of describing the set of a on any array of numbers of length N
Dialogue: 0,0:36:12.05,0:36:15.11,Default,,0,0,0,,and before writing next let me make a definition
Dialogue: 0,0:36:16.10,0:36:20.03,Default,,0,0,0,,let me define partitions of B pivot low high
Dialogue: 0,0:36:20.09,0:36:23.93,Default,,0,0,0,,it's the set of arrays obtained from B
Dialogue: 0,0:36:24.26,0:36:27.83,Default,,0,0,0,,by permuting the load to be high
Dialogue: 0,0:36:27.86,0:36:31.49,Default,,0,0,0,,with pivot point pivot in other words
Dialogue: 0,0:36:31.23,0:36:34.91,Default,,0,0,0,,it's the set of all values that the partition procedure
Dialogue: 0,0:36:34.67,0:36:38.09,Default,,0,0,0,,the set of all new values of a that
Dialogue: 0,0:36:38.13,0:36:40.19,Default,,0,0,0,,the partition procedure is allowed to return
Dialogue: 0,0:36:40.62,0:36:44.54,Default,,0,0,0,,if it's also returning pivot as the pivot point
Dialogue: 0,0:36:44.28,0:36:46.91,Default,,0,0,0,,and I won't bother writing it out precisely
Dialogue: 0,0:36:48.26,0:36:54.29,Default,,0,0,0,,so next remember it's going to be a relation between the old values of a of U
Dialogue: 0,0:36:54.00,0:36:56.81,Default,,0,0,0,,and the new values a prime and u Prime
Dialogue: 0,0:36:56.81,0:36:58.73,Default,,0,0,0,,so let's write it
Dialogue: 0,0:36:58.85,0:37:01.88,Default,,0,0,0,,first of all we're gonna stop
Dialogue: 0,0:37:01.86,0:37:03.53,Default,,0,0,0,,if u is the empty set
Dialogue: 0,0:37:03.35,0:37:08.15,Default,,0,0,0,,so the next state relation says U is not equal to the empty set
Dialogue: 0,0:37:08.04,0:37:12.50,Default,,0,0,0,,and so performing there's going to be false if u is the empty set
Dialogue: 0,0:37:13.01,0:37:19.88,Default,,0,0,0,,then we pick any pair BT in U and if B
Dialogue: 0,0:37:19.89,0:37:28.58,Default,,0,0,0,,is not equal to T then we pick any point P any number P lying in B to t minus 1
Dialogue: 0,0:37:28.32,0:37:33.95,Default,,0,0,0,,and we let a prime be any element of
Dialogue: 0,0:37:34.67,0:37:37.33,Default,,0,0,0,,the set of legal partitions you know the
Dialogue: 0,0:37:37.34,0:37:40.41,Default,,0,0,0,,results of the partition function that
Dialogue: 0,0:37:40.91,0:37:43.54,Default,,0,0,0,,if you've given it B and T is the input
Dialogue: 0,0:37:43.55,0:37:48.43,Default,,0,0,0,,and it returns P as the partition as the
Dialogue: 0,0:37:48.44,0:37:54.52,Default,,0,0,0,,pivot point and then u prime is a set u
Dialogue: 0,0:37:54.53,0:37:57.58,Default,,0,0,0,,we're finished with the remain element bT
Dialogue: 0,0:37:57.50,0:38:00.79,Default,,0,0,0,,so we move that from the set and then we add the 2 subintervals
Dialogue: 0,0:38:01.30,0:38:05.32,Default,,0,0,0,,be P and you know to be and P plus 1 to T
Dialogue: 0,0:38:05.06,0:38:12.13,Default,,0,0,0,,into the set u of of ranges that still need to be sorted
Dialogue: 0,0:38:13.18,0:38:18.55,Default,,0,0,0,,otherwise if B is not e is equal to T then there's nothing to do
Dialogue: 0,0:38:18.23,0:38:26.62,Default,,0,0,0,,we leave a prime unchanged and we let u prime equal u with BT removed
Dialogue: 0,0:38:26.57,0:38:29.44,Default,,0,0,0,,we just take BT out of out of the set
Dialogue: 0,0:38:29.18,0:38:32.62,Default,,0,0,0,,and that's the next state relation
Dialogue: 0,0:38:32.83,0:38:40.98,Default,,0,0,0,,that describes a very nice way of doing quicksort iterative iteratively
Dialogue: 0,0:38:41.48,0:38:45.91,Default,,0,0,0,,it's actually a more general algorithm because if you
Dialogue: 0,0:38:45.50,0:38:47.50,Default,,0,0,0,,look at all the behaviors that can produce
Dialogue: 0,0:38:48.01,0:38:53.47,Default,,0,0,0,,the set of behaviors produced by the recursive version is a sub set
Dialogue: 0,0:38:53.27,0:38:56.86,Default,,0,0,0,,that is the set of all sequences of values
Dialogue: 0,0:38:56.81,0:38:59.47,Default,,0,0,0,,that a assumes is going to be a subset
Dialogue: 0,0:38:59.51,0:39:06.34,Default,,0,0,0,,of the ones that this next state relation allows
Dialogue: 0,0:39:06.67,0:39:10.99,Default,,0,0,0,,so why can almost no one find this version of quicksort
Dialogue: 0,0:39:12.22,0:39:15.67,Default,,0,0,0,,because people's minds are stuck in code
Dialogue: 0,0:39:16.30,0:39:23.20,Default,,0,0,0,,they haven't thought learn to think at a higher level than the code
Dialogue: 0,0:39:23.59,0:39:27.28,Default,,0,0,0,,now it's easy to write this as a precise formula
Dialogue: 0,0:39:27.58,0:39:33.10,Default,,0,0,0,,pick any arbitrary value is really existential quantification
Dialogue: 0,0:39:33.17,0:39:40.30,Default,,0,0,0,,the formula is true if there exists a value B T and u similarly there
Dialogue: 0,0:39:40.13,0:39:46.75,Default,,0,0,0,,and just let letting a prime be any element of this set
Dialogue: 0,0:39:46.52,0:39:48.16,Default,,0,0,0,,well that's easy enough to write
Dialogue: 0,0:39:48.08,0:39:50.29,Default,,0,0,0,,is a prime and an element of that
Dialogue: 0,0:39:50.24,0:39:54.40,Default,,0,0,0,,and those relations new values of U prime those thinks the
Dialogue: 0,0:39:54.22,0:39:58.09,Default,,0,0,0,,with prose to the right of the equal sign
Dialogue: 0,0:39:57.91,0:39:59.89,Default,,0,0,0,,they're easy to express
Dialogue: 0,0:40:00.13,0:40:09.67,Default,,0,0,0,,whoops this way and so on then
Dialogue: 0,0:40:09.88,0:40:19.09,Default,,0,0,0,,so what you have is a TLA plus formula here perfectly formal
Dialogue: 0,0:40:19.54,0:40:22.27,Default,,0,0,0,,if you prefer pseudocode
Dialogue: 0,0:40:23.77,0:40:28.63,Default,,0,0,0,,we have plus Cal it looks like a toy programming language
Dialogue: 0,0:40:28.55,0:40:34.84,Default,,0,0,0,,and the algorithm in fact appears in a comment and TLA plus module but an expression
Dialogue: 0,0:40:34.88,0:40:37.48,Default,,0,0,0,,can be any TLA plus expression
Dialogue: 0,0:40:37.72,0:40:40.66,Default,,0,0,0,,it also has some constructs for non determinism
Dialogue: 0,0:40:40.73,0:40:42.85,Default,,0,0,0,,but the fact that it can be any TLA
Dialogue: 0,0:40:42.83,0:40:45.24,Default,,0,0,0,,an expression can be any TLA plus expression
Dialogue: 0,0:40:45.74,0:40:48.04,Default,,0,0,0,,which means any expression of mathematics
Dialogue: 0,0:40:48.26,0:40:51.88,Default,,0,0,0,,makes it enormously powerful more more expressive than
Dialogue: 0,0:40:51.59,0:40:57.55,Default,,0,0,0,,anything any programming language designer has ever dreamed of
Dialogue: 0,0:40:57.37,0:41:02.02,Default,,0,0,0,,and it gets compiled to an easy-to-understand TLA plus spec
Dialogue: 0,0:41:01.85,0:41:06.34,Default,,0,0,0,,and in fact I regularly write things in plus cal
Dialogue: 0,0:41:06.14,0:41:08.83,Default,,0,0,0,,and then when I'm proving the correctness of them
Dialogue: 0,0:41:08.51,0:41:11.58,Default,,0,0,0,,I reason directly about the TLA plus specification
Dialogue: 0,0:41:12.08,0:41:15.13,Default,,0,0,0,,and you like the TLA plus tools the model checker
Dialogue: 0,0:41:14.90,0:41:18.16,Default,,0,0,0,,and theorem prover to the plus to the translation
Dialogue: 0,0:41:20.55,0:41:25.95,Default,,0,0,0,,programs that run forever have been talking about programs that compute a function
Dialogue: 0,0:41:26.34,0:41:29.55,Default,,0,0,0,,programs that run forever usually involve concurrency
Dialogue: 0,0:41:30.09,0:41:33.45,Default,,0,0,0,,things like operating systems distributed systems
Dialogue: 0,0:41:33.78,0:41:36.27,Default,,0,0,0,,few people can get them right
Dialogue: 0,0:41:36.01,0:41:37.92,Default,,0,0,0,,by just thinking and writing
Dialogue: 0,0:41:38.37,0:41:40.29,Default,,0,0,0,,I'm not one of them
Dialogue: 0,0:41:40.53,0:41:44.76,Default,,0,0,0,,we need tools to check what we're doing
Dialogue: 0,0:41:45.12,0:41:50.31,Default,,0,0,0,,the reason the TLA plus was so useful to the Amazon engineers is
Dialogue: 0,0:41:50.05,0:41:51.93,Default,,0,0,0,,because the model checker
Dialogue: 0,0:41:52.62,0:41:58.44,Default,,0,0,0,,so for concurrent and distributed systems you need to write something
Dialogue: 0,0:41:58.42,0:42:02.88,Default,,0,0,0,,you use TLA plus or plus Cal it was designed for distributed systems
Dialogue: 0,0:42:02.91,0:42:08.46,Default,,0,0,0,,it's great and you're not gonna get it you know distributed concurrent algorithm right
Dialogue: 0,0:42:08.20,0:42:09.63,Default,,0,0,0,,if you don't model check
Dialogue: 0,0:42:09.52,0:42:13.71,Default,,0,0,0,,it it's spent you don't write a specification and check it
Dialogue: 0,0:42:14.16,0:42:19.89,Default,,0,0,0,,the other 95% really simple stuff here is an example
Dialogue: 0,0:42:19.99,0:42:24.84,Default,,0,0,0,,of a spec you know that I write wrote in a program
Dialogue: 0,0:42:25.26,0:42:27.27,Default,,0,0,0,,why did I write that spec
Dialogue: 0,0:42:27.42,0:42:31.50,Default,,0,0,0,,to be sure I knew what the code should do before writing it
Dialogue: 0,0:42:31.53,0:42:36.54,Default,,0,0,0,,without writing aspect I only thought it was obvious what it should do
Dialogue: 0,0:42:36.22,0:42:40.77,Default,,0,0,0,,I had to write the spec to be sure it was really as simple and as obvious
Dialogue: 0,0:42:40.72,0:42:42.06,Default,,0,0,0,,as I thought it was
Dialogue: 0,0:42:42.09,0:42:46.11,Default,,0,0,0,,and later I didn't have to read the code
Dialogue: 0,0:42:45.91,0:42:49.20,Default,,0,0,0,,to know what that piece of code I wrote did
Dialogue: 0,0:42:49.18,0:42:52.74,Default,,0,0,0,,I just wrote the specification could read the specification
Dialogue: 0,0:42:52.99,0:42:59.52,Default,,0,0,0,,so a general rule that's one rule at least we can say about specs in general
Dialogue: 0,0:42:59.38,0:43:02.64,Default,,0,0,0,,if you're writing a spec of what a code should do
Dialogue: 0,0:43:02.32,0:43:04.65,Default,,0,0,0,,what a piece of code should do
Dialogue: 0,0:43:04.30,0:43:09.30,Default,,0,0,0,,that should say everything that anyone needs to know to use the code
Dialogue: 0,0:43:11.07,0:43:14.31,Default,,0,0,0,,how the code worked in the example I've just showed
Dialogue: 0,0:43:14.35,0:43:16.41,Default,,0,0,0,,was just too simple to require a spec
Dialogue: 0,0:43:16.30,0:43:19.74,Default,,0,0,0,,I mean it was it turned out to be harder than I thought
Dialogue: 0,0:43:19.27,0:43:22.17,Default,,0,0,0,,I would have discovered that when I started coding
Dialogue: 0,0:43:21.88,0:43:25.53,Default,,0,0,0,,and I would have stopped coding and wrote and written a specification
Dialogue: 0,0:43:26.40,0:43:30.27,Default,,0,0,0,,so what programmers should know about thinking
Dialogue: 0,0:43:30.57,0:43:33.00,Default,,0,0,0,,what everyone should know about thinking
Dialogue: 0,0:43:33.85,0:43:35.40,Default,,0,0,0,,everyone thinks they think
Dialogue: 0,0:43:36.09,0:43:39.12,Default,,0,0,0,,but if you don't write down your thoughts
Dialogue: 0,0:43:39.60,0:43:41.52,Default,,0,0,0,,you're fooling yourself
Dialogue: 0,0:43:42.45,0:43:45.00,Default,,0,0,0,,what programmers should know about thinking
Dialogue: 0,0:43:45.07,0:43:49.26,Default,,0,0,0,,is that you should think before you code
Dialogue: 0,0:43:51.87,0:43:55.35,Default,,0,0,0,,which means you should write before you code
Dialogue: 0,0:43:55.12,0:43:59.55,Default,,0,0,0,,a spec is simply what you write before coating
Dialogue: 0,0:43:59.97,0:44:04.29,Default,,0,0,0,,so what coach you know what do I mean by code what should you specify
Dialogue: 0,0:44:04.71,0:44:09.00,Default,,0,0,0,,basically any piece of code that someone else might want to use or modifying
Dialogue: 0,0:44:08.98,0:44:13.71,Default,,0,0,0,,and that somebody else is likely to be you in a month
Dialogue: 0,0:44:13.45,0:44:16.14,Default,,0,0,0,,when you've forgotten what this piece of code you've written does
Dialogue: 0,0:44:16.89,0:44:21.78,Default,,0,0,0,,it could be an entire program or system a class a method
Dialogue: 0,0:44:22.18,0:44:25.08,Default,,0,0,0,,just a tricky piece of code inside of a method
Dialogue: 0,0:44:26.19,0:44:28.98,Default,,0,0,0,,what should you specify about the code
Dialogue: 0,0:44:29.46,0:44:31.08,Default,,0,0,0,,what it does
Dialogue: 0,0:44:32.04,0:44:35.73,Default,,0,0,0,,which means everything anyone needs to know to use it
Dialogue: 0,0:44:35.56,0:44:38.58,Default,,0,0,0,,and perhaps how it does it
Dialogue: 0,0:44:38.26,0:44:43.71,Default,,0,0,0,,if it's complicated subtle you need to think hard about in order to get it right
Dialogue: 0,0:44:44.16,0:44:47.19,Default,,0,0,0,,this is you know what's sometimes called an algorithm
Dialogue: 0,0:44:47.11,0:44:48.54,Default,,0,0,0,,or a high-level design
Dialogue: 0,0:44:50.34,0:44:58.05,Default,,0,0,0,,how should you think about or specify your code above the code level
Dialogue: 0,0:44:57.97,0:45:02.09,Default,,0,0,0,,in terms of states and behaviors or
Dialogue: 0,0:45:03.09,0:45:05.51,Default,,0,0,0,,functions for input output relations
Dialogue: 0,0:45:05.52,0:45:07.23,Default,,0,0,0,,should do it mathematically
Dialogue: 0,0:45:07.08,0:45:11.79,Default,,0,0,0,,as rigorously informally as is necessary
Dialogue: 0,0:45:12.57,0:45:14.85,Default,,0,0,0,,you should be thinking mathematically
Dialogue: 0,0:45:14.88,0:45:18.39,Default,,0,0,0,,even if you're writing thing the mathematics very informally
Dialogue: 0,0:45:20.01,0:45:23.67,Default,,0,0,0,,perhaps with pseudocode or pass or plus Cal
Dialogue: 0,0:45:23.44,0:45:26.19,Default,,0,0,0,,if you're specifying how something does it
Dialogue: 0,0:45:26.49,0:45:28.83,Default,,0,0,0,,so how do you learn to write specs
Dialogue: 0,0:45:29.64,0:45:35.76,Default,,0,0,0,,by writing formal specs even if you don't
Dialogue: 0,0:45:35.53,0:45:39.57,Default,,0,0,0,,even if you never need to write a completely formal spec in your life
Dialogue: 0,0:45:39.39,0:45:45.27,Default,,0,0,0,,learning to write formal specs will really help you learn to write the informal specs
Dialogue: 0,0:45:45.10,0:45:46.26,Default,,0,0,0,,that you need to write
Dialogue: 0,0:45:46.69,0:45:51.64,Default,,0,0,0,,you learn to write programs by writing them running them and correcting your errors
Dialogue: 0,0:45:51.85,0:45:57.52,Default,,0,0,0,,you can learn to write formal specs by writing them running them
Dialogue: 0,0:45:57.35,0:45:59.98,Default,,0,0,0,,with a model checker and correcting your errors
Dialogue: 0,0:46:00.37,0:46:04.87,Default,,0,0,0,,now TL A+ may not be the best language for you
Dialogue: 0,0:46:04.64,0:46:09.01,Default,,0,0,0,,you know it's I'm sure it's not the best language for formal language
Dialogue: 0,0:46:08.90,0:46:11.11,Default,,0,0,0,,for every kind of specification in the world
Dialogue: 0,0:46:10.82,0:46:12.34,Default,,0,0,0,,no language can be
Dialogue: 0,0:46:12.16,0:46:17.59,Default,,0,0,0,,it may not be the best form of language you know for what your particular needs are
Dialogue: 0,0:46:17.27,0:46:20.20,Default,,0,0,0,,but I do know that it's great for
Dialogue: 0,0:46:20.21,0:46:21.40,Default,,0,0,0,,learning to think mathematically
Dialogue: 0,0:46:21.91,0:46:29.89,Default,,0,0,0,,so unless you can find something better for doing that you know which works use TL a plus
Dialogue: 0,0:46:29.72,0:46:31.33,Default,,0,0,0,,you know learn TL a plus
Dialogue: 0,0:46:31.10,0:46:32.35,Default,,0,0,0,,learn to think mathematically
Dialogue: 0,0:46:34.33,0:46:37.12,Default,,0,0,0,,how do you connect the spec to the code
Dialogue: 0,0:46:37.57,0:46:42.37,Default,,0,0,0,,well you have comments connecting mathematical concepts and their implementation
Dialogue: 0,0:46:42.11,0:46:45.37,Default,,0,0,0,,for example the mathematical concept might
Dialogue: 0,0:46:45.08,0:46:45.79,Default,,0,0,0,,be a graph
Dialogue: 0,0:46:45.65,0:46:51.70,Default,,0,0,0,,and the implementation would be an array of node objects and an array of link objects
Dialogue: 0,0:46:51.85,0:46:56.47,Default,,0,0,0,,in this connection the other specification especially
Dialogue: 0,0:46:56.75,0:46:59.11,Default,,0,0,0,,if it's an informal specification should be in the comments
Dialogue: 0,0:46:59.09,0:47:03.01,Default,,0,0,0,,and so should the explanation of how those mathematical
Dialogue: 0,0:47:02.84,0:47:05.32,Default,,0,0,0,,comments are implemented in the code
Dialogue: 0,0:47:05.06,0:47:07.51,Default,,0,0,0,,so what about coding
Dialogue: 0,0:47:07.52,0:47:10.99,Default,,0,0,0,,I mean we're programs involve writing code you have to write code
Dialogue: 0,0:47:10.91,0:47:14.08,Default,,0,0,0,,I have nothing to say about writing code
Dialogue: 0,0:47:13.90,0:47:16.21,Default,,0,0,0,,nothing I said implies anything
Dialogue: 0,0:47:16.72,0:47:19.87,Default,,0,0,0,,you still have to think while you code
Dialogue: 0,0:47:19.78,0:47:22.60,Default,,0,0,0,,which means you have to write while you're coding
Dialogue: 0,0:47:22.52,0:47:25.90,Default,,0,0,0,,but what you're right while you're coding is is code
Dialogue: 0,0:47:26.71,0:47:30.01,Default,,0,0,0,,and I have nothing to say about how you should code
Dialogue: 0,0:47:29.72,0:47:31.66,Default,,0,0,0,,use any programming language you want
Dialogue: 0,0:47:31.67,0:47:33.28,Default,,0,0,0,,any programming methodology
Dialogue: 0,0:47:33.97,0:47:38.26,Default,,0,0,0,,you still you're still going to have to test and debug your program
Dialogue: 0,0:47:38.56,0:47:43.36,Default,,0,0,0,,not this good writing aspect is we're going to catch coding errors
Dialogue: 0,0:47:43.16,0:47:44.56,Default,,0,0,0,,because it's not about coding
Dialogue: 0,0:47:44.54,0:47:46.93,Default,,0,0,0,,it'll catch algorithm errors
Dialogue: 0,0:47:48.04,0:47:50.83,Default,,0,0,0,,writing specs is an additional step
Dialogue: 0,0:47:50.60,0:47:54.52,Default,,0,0,0,,and it may save time by catching errors early
Dialogue: 0,0:47:54.26,0:47:57.79,Default,,0,0,0,,when they're easier to correct no promises there
Dialogue: 0,0:47:57.53,0:48:00.73,Default,,0,0,0,,it certainly will improve you programming
Dialogue: 0,0:48:00.86,0:48:02.92,Default,,0,0,0,,so you'll be writing better programs
Dialogue: 0,0:48:03.91,0:48:06.88,Default,,0,0,0,,why are programmers reluctant to write specs
Dialogue: 0,0:48:06.95,0:48:09.70,Default,,0,0,0,,well writing is hard writing is hard
Dialogue: 0,0:48:09.41,0:48:11.05,Default,,0,0,0,,in fact because thinking is hard
Dialogue: 0,0:48:10.99,0:48:13.63,Default,,0,0,0,,you know there's no Royal Road to mathematics
Dialogue: 0,0:48:13.97,0:48:18.19,Default,,0,0,0,,as who wasn't who said that Archimedes I think
Dialogue: 0,0:48:19.39,0:48:23.41,Default,,0,0,0,,why is writing hard well because writing requires thinking
Dialogue: 0,0:48:23.21,0:48:24.97,Default,,0,0,0,,and thinking is hard
Dialogue: 0,0:48:24.71,0:48:27.97,Default,,0,0,0,,and as I said it's easier to think you're thinking
Dialogue: 0,0:48:28.18,0:48:30.31,Default,,0,0,0,,writing is a lot like running
Dialogue: 0,0:48:30.52,0:48:33.64,Default,,0,0,0,,unless you do it slower you are
Dialogue: 0,0:48:33.17,0:48:36.43,Default,,0,0,0,,and you have to strengthen your writing muscles
Dialogue: 0,0:48:36.35,0:48:38.32,Default,,0,0,0,,you know just like you have to strengthen your rust
Dialogue: 0,0:48:38.06,0:48:40.48,Default,,0,0,0,,and you're running muscles it takes practice
Dialogue: 0,0:48:40.22,0:48:43.96,Default,,0,0,0,,and it's easier to find an excuse not to
Dialogue: 0,0:48:44.41,0:48:48.52,Default,,0,0,0,,and one of the nicest excuses well what if the spec is wrong
Dialogue: 0,0:48:48.37,0:48:50.79,Default,,0,0,0,,maybe you made a mistake in the spec
Dialogue: 0,0:48:50.80,0:48:53.50,Default,,0,0,0,,maybe the requirements change where
Dialogue: 0,0:48:53.27,0:48:54.67,Default,,0,0,0,,some enhancement is needed
Dialogue: 0,0:48:54.53,0:49:01.78,Default,,0,0,0,,in fact and the code will have to be changed maybe even before the program is finished
Dialogue: 0,0:49:01.84,0:49:07.75,Default,,0,0,0,,in fact changing the code is something that
Dialogue: 0,0:49:07.52,0:49:09.79,Default,,0,0,0,,eventually happens to all useful programs
Dialogue: 0,0:49:10.46,0:49:11.80,Default,,0,0,0,,your program is useful
Dialogue: 0,0:49:12.28,0:49:18.28,Default,,0,0,0,,it's gonna have users the users are going to find things extra things they want of it
Dialogue: 0,0:49:17.93,0:49:20.44,Default,,0,0,0,,the things that don't work the way
Dialogue: 0,0:49:19.97,0:49:23.13,Default,,0,0,0,,you know you thought was a good idea be your customers
Dialogue: 0,0:49:23.63,0:49:27.79,Default,,0,0,0,,you know decide otherwise this happens eventually happens to all useful programs
Dialogue: 0,0:49:28.15,0:49:32.41,Default,,0,0,0,,in an ideal world you'd write a new spec
Dialogue: 0,0:49:32.30,0:49:36.31,Default,,0,0,0,,and then you know the code you'd completely rewrite the spec of the spec
Dialogue: 0,0:49:36.11,0:49:38.92,Default,,0,0,0,,well we all know this isn't gonna happen
Dialogue: 0,0:49:38.87,0:49:42.25,Default,,0,0,0,,in the real world the code is patched
Dialogue: 0,0:49:42.05,0:49:44.77,Default,,0,0,0,,and if you're lucky the spec is updated
Dialogue: 0,0:49:45.40,0:49:50.26,Default,,0,0,0,,well if this is inevitable why bother writing specs in the first place
Dialogue: 0,0:49:50.03,0:49:52.96,Default,,0,0,0,,if you know this little lovely thing is
Dialogue: 0,0:49:52.97,0:49:57.30,Default,,0,0,0,,you know the spec turns out you know - has to be changed and you know
Dialogue: 0,0:49:57.80,0:50:00.22,Default,,0,0,0,,we're back in our old messy world
Dialogue: 0,0:49:59.96,0:50:01.75,Default,,0,0,0,,well there's two reasons
Dialogue: 0,0:50:01.28,0:50:06.61,Default,,0,0,0,,the first reason is that whoever has to modify the code
Dialogue: 0,0:50:06.73,0:50:12.73,Default,,0,0,0,,will be eternally grateful for every word or formula of specification that you write
Dialogue: 0,0:50:12.84,0:50:18.59,Default,,0,0,0,,and whoever maybe you believe me I've you've done that you know coming back
Dialogue: 0,0:50:18.65,0:50:21.35,Default,,0,0,0,,and don't have time for second stories
Dialogue: 0,0:50:21.36,0:50:24.98,Default,,0,0,0,,but particularly you know modifications and the pretty print or in fact
Dialogue: 0,0:50:25.43,0:50:30.95,Default,,0,0,0,,and that's why you should update the spec when you change the code
Dialogue: 0,0:50:31.22,0:50:36.92,Default,,0,0,0,,the second reason is that every time code is patched
Dialogue: 0,0:50:36.75,0:50:41.75,Default,,0,0,0,,it becomes a little uglier harder to understand and harder to maintain
Dialogue: 0,0:50:43.82,0:50:51.05,Default,,0,0,0,,and if you but if you don't start with a spec every piece of code you write
Dialogue: 0,0:50:50.79,0:50:56.18,Default,,0,0,0,,is a patch which means the program starts out from the beginning
Dialogue: 0,0:50:56.15,0:50:59.12,Default,,0,0,0,,being ugly hard to understand and hard
Dialogue: 0,0:50:59.13,0:51:02.81,Default,,0,0,0,,to maintain and then God help you when you do have to maintain
Dialogue: 0,0:51:02.67,0:51:07.15,Default,,0,0,0,,you know try to unfit out what it's doing in order to to
Dialogue: 0,0:51:07.65,0:51:12.95,Default,,0,0,0,,make changes as Dwight Eisenhower said
Dialogue: 0,0:51:13.10,0:51:16.40,Default,,0,0,0,,no battle was ever won according to plan
Dialogue: 0,0:51:16.76,0:51:19.67,Default,,0,0,0,,but no battle was ever won with that one
Dialogue: 0,0:51:20.84,0:51:22.91,Default,,0,0,0,,so some people will tell you that
Dialogue: 0,0:51:22.92,0:51:24.71,Default,,0,0,0,,writing specs is a waste of time
Dialogue: 0,0:51:24.92,0:51:27.53,Default,,0,0,0,,in some situations and maybe
Dialogue: 0,0:51:28.34,0:51:33.17,Default,,0,0,0,,sometimes there's no need to think about what you're doing maybe something is really so trivial
Dialogue: 0,0:51:33.18,0:51:35.30,Default,,0,0,0,,that you know doesn't need much thought
Dialogue: 0,0:51:35.63,0:51:40.46,Default,,0,0,0,,but we'll remember when they're telling you not to write a spec
Dialogue: 0,0:51:40.38,0:51:43.76,Default,,0,0,0,,they're telling really telling you not to think
Dialogue: 0,0:51:43.67,0:51:48.68,Default,,0,0,0,,and you know thinking is a really good idea
Dialogue: 0,0:51:48.21,0:51:51.83,Default,,0,0,0,,and don't trust anybody who tells you not to do it
Dialogue: 0,0:51:52.19,0:51:55.34,Default,,0,0,0,,thinking doesn't guarantee that you won't make mistakes
Dialogue: 0,0:51:55.91,0:51:59.78,Default,,0,0,0,,but not thinking generally guarantees that you will
Dialogue: 0,0:52:00.53,0:52:07.22,Default,,0,0,0,,find out more about TLA plus go to my home page and click on the link to the TLA web page
Dialogue: 0,0:52:07.19,0:52:08.69,Default,,0,0,0,,thank you
Dialogue: 0,0:52:09.22,0:52:09.72,Default,,0,0,0,,[Applause]
Dialogue: 0,0:52:15.86,0:52:18.64,Default,,0,0,0,,I think there's time for a few questions
Dialogue: 0,0:52:21.25,0:52:23.17,Default,,0,0,0,,very few I think
Dialogue: 0,0:52:23.62,0:52:25.69,Default,,0,0,0,,one yeah yes
Dialogue: 0,0:52:25.97,0:52:33.13,Default,,0,0,0,,I hope that's not a judgment on my talk
Dialogue: 0,0:52:35.17,0:52:36.91,Default,,0,0,0,,thanks for your talk
Dialogue: 0,0:52:36.86,0:52:39.25,Default,,0,0,0,,how about specification by example
Dialogue: 0,0:52:39.68,0:52:44.95,Default,,0,0,0,,it's a pragmatic approach that is a little bit inspired by test-driven development
Dialogue: 0,0:52:45.04,0:52:50.82,Default,,0,0,0,,which since it's not complete of course
Dialogue: 0,0:52:50.83,0:52:54.16,Default,,0,0,0,,but since completeness anyway is undecidable
Dialogue: 0,0:52:54.38,0:52:58.51,Default,,0,0,0,,it's a good pragmatic approach so do you know
Dialogue: 0,0:52:58.16,0:53:02.11,Default,,0,0,0,,so terrible pragmatic approach it's maybe a good
Dialogue: 0,0:53:01.70,0:53:06.73,Default,,0,0,0,,maybe a good way to explain what something examples are great to explain them
Dialogue: 0,0:53:06.44,0:53:09.37,Default,,0,0,0,,but they're terrible they keep you from thinking
Dialogue: 0,0:53:09.41,0:53:11.95,Default,,0,0,0,,you think in terms of these particular examples
Dialogue: 0,0:53:12.05,0:53:17.59,Default,,0,0,0,,the real problem in programming is not to think of your the easy cases the obvious cases
Dialogue: 0,0:53:17.33,0:53:19.72,Default,,0,0,0,,the nice case if the hard cases
Dialogue: 0,0:53:19.55,0:53:21.82,Default,,0,0,0,,and you don't get that with examples
Dialogue: 0,0:53:21.86,0:53:24.52,Default,,0,0,0,,and boy I'll tell you I used to eclipse programming
Dialogue: 0,0:53:24.79,0:53:33.25,Default,,0,0,0,,and I've you know there's so much so many methods of eclipse
Dialogue: 0,0:53:33.65,0:53:38.50,Default,,0,0,0,,that are explained by here's an here's an example of code using it
Dialogue: 0,0:53:38.27,0:53:44.80,Default,,0,0,0,,and I have yet to manage to use those methods to do it what I want to do
Dialogue: 0,0:53:44.48,0:53:48.94,Default,,0,0,0,,because it doesn't work I find that it just doesn't work on anything other than that example
Dialogue: 0,0:53:48.80,0:53:50.41,Default,,0,0,0,,and I have no idea why not
Dialogue: 0,0:53:50.20,0:53:53.80,Default,,0,0,0,,not a program you know programming by example
Dialogue: 0,0:53:53.84,0:53:56.20,Default,,0,0,0,,I don't know about you know if that works
Dialogue: 0,0:53:56.00,0:53:59.02,Default,,0,0,0,,but a specification by example it doesn't
Dialogue: 0,0:54:09.63,0:54:11.85,Default,,0,0,0,,thank you for the great talk um
Dialogue: 0,0:54:11.83,0:54:14.07,Default,,0,0,0,,so what happens once you patch the code
Dialogue: 0,0:54:13.75,0:54:16.71,Default,,0,0,0,,do you suggest keeping the old specs around or
Dialogue: 0,0:54:16.60,0:54:17.88,Default,,0,0,0,,do you just get rid of him
Dialogue: 0,0:54:17.56,0:54:19.59,Default,,0,0,0,,like does it help to have context
Dialogue: 0,0:54:24.06,0:54:31.83,Default,,0,0,0,,well first of all I think whenever I well whenever I do fix bugs and that may require changing the spec
Dialogue: 0,0:54:31.63,0:54:35.58,Default,,0,0,0,,I will also take a note as to why I change the spec
Dialogue: 0,0:54:35.40,0:54:39.81,Default,,0,0,0,,because you know two years later I'm going to come back
Dialogue: 0,0:54:39.34,0:54:40.95,Default,,0,0,0,,and say why did I do that
Dialogue: 0,0:54:41.67,0:54:45.00,Default,,0,0,0,,about whether you know to what extent that's useful
Dialogue: 0,0:54:45.36,0:54:50.31,Default,,0,0,0,,for the specification itself I don't know
Dialogue: 0,0:54:50.17,0:54:53.58,Default,,0,0,0,,certainly you're always a good idea not to throw anything away
Dialogue: 0,0:54:53.32,0:54:57.90,Default,,0,0,0,,you know we shouldn't be throwing you know information away these days you know
Dialogue: 0,0:54:57.52,0:55:02.13,Default,,0,0,0,,it doesn't cost anything to save it so you should certainly save the old specs
Dialogue: 0,0:55:02.11,0:55:04.89,Default,,0,0,0,,whether you should you know
Dialogue: 0,0:55:04.51,0:55:07.50,Default,,0,0,0,,whether you should mention the change in the
Dialogue: 0,0:55:07.57,0:55:10.62,Default,,0,0,0,,in the new spec I don't I don't have any
Dialogue: 0,0:55:10.27,0:55:12.87,Default,,0,0,0,,any good answer to that
Dialogue: 0,0:55:17.43,0:55:23.79,Default,,0,0,0,,without wanting to be rude or anything I think most programmers
Dialogue: 0,0:55:24.12,0:55:27.03,Default,,0,0,0,,don't use formal specifications anymore
Dialogue: 0,0:55:26.89,0:55:28.29,Default,,0,0,0,,my PhD was in that background
Dialogue: 0,0:55:28.18,0:55:33.03,Default,,0,0,0,,most programmers these days they take algorithms they take code
Dialogue: 0,0:55:32.86,0:55:34.38,Default,,0,0,0,,they adapt it to what they want to do
Dialogue: 0,0:55:34.39,0:55:37.50,Default,,0,0,0,,and that's 99 percent is from my perspective
Dialogue: 0,0:55:37.33,0:55:39.75,Default,,0,0,0,,how most software is built these days
Dialogue: 0,0:55:40.89,0:55:44.79,Default,,0,0,0,,that we actually really be nice if it
Dialogue: 0,0:55:44.41,0:55:48.78,Default,,0,0,0,,if that where it can build Bell built well that way
Dialogue: 0,0:55:49.81,0:55:53.67,Default,,0,0,0,,it doesn't work because they're trying to use
Dialogue: 0,0:55:53.41,0:55:58.26,Default,,0,0,0,,I find that it doesn't work because the other pieces of code
Dialogue: 0,0:55:58.06,0:56:00.75,Default,,0,0,0,,that I want to use don't have specifications
Dialogue: 0,0:56:01.15,0:56:03.54,Default,,0,0,0,,so I really can't use them very well
Dialogue: 0,0:56:03.43,0:56:05.22,Default,,0,0,0,,I do the best I can
Dialogue: 0,0:56:04.78,0:56:10.23,Default,,0,0,0,,and I wind up having to spend a hell of a lot of time
Dialogue: 0,0:56:10.68,0:56:14.10,Default,,0,0,0,,trying to figure out what this piece of code does
Dialogue: 0,0:56:14.91,0:56:18.18,Default,,0,0,0,,which something I shouldn't have to do if it had been specified
Dialogue: 0,0:56:19.25,0:56:22.72,Default,,0,0,0,,again I've said that you know 95% of programming
Dialogue: 0,0:56:23.92,0:56:27.37,Default,,0,0,0,,you know requires very little specification
Dialogue: 0,0:56:27.80,0:56:33.85,Default,,0,0,0,,and you know a few lines you know are usually enough
Dialogue: 0,0:56:33.70,0:56:36.88,Default,,0,0,0,,but you know you are going to come up with this 5%
Dialogue: 0,0:56:36.89,0:56:40.03,Default,,0,0,0,,which isn't just you know take this thing and put it here
Dialogue: 0,0:56:39.56,0:56:41.11,Default,,0,0,0,,and combine it with this thing
Dialogue: 0,0:56:40.69,0:56:44.62,Default,,0,0,0,,there's gonna be something some things code you're gonna have to write
Dialogue: 0,0:56:44.33,0:56:50.29,Default,,0,0,0,,that is subtle it has some some a bit of difficulty in it
Dialogue: 0,0:56:49.91,0:56:53.59,Default,,0,0,0,,and you want to be able to you know you want to be prepared for that
Dialogue: 0,0:56:53.45,0:56:55.81,Default,,0,0,0,,because we use the same techniques that
Dialogue: 0,0:56:55.82,0:56:58.03,Default,,0,0,0,,you use you're the same lack of thought
Dialogue: 0,0:56:58.04,0:57:00.10,Default,,0,0,0,,that you use when you're doing that other 95%
Dialogue: 0,0:57:00.58,0:57:02.68,Default,,0,0,0,,you're gonna screw up badly
Dialogue: 0,0:57:12.40,0:57:15.97,Default,,0,0,0,,unfortunately I have never really looked into TLA plus
Dialogue: 0,0:57:16.28,0:57:24.79,Default,,0,0,0,,but having studied temporal logic it is inevitable to to fail to to notice that
Dialogue: 0,0:57:24.74,0:57:26.71,Default,,0,0,0,,that there's a lot of temporal logic
Dialogue: 0,0:57:26.68,0:57:29.53,Default,,0,0,0,,going on underlying what you've been saying
Dialogue: 0,0:57:29.33,0:57:38.02,Default,,0,0,0,,so I was wondering have you studied probably you have the possibilities
Dialogue: 0,0:57:38.21,0:57:41.35,Default,,0,0,0,,for using more directly the language of temporal logic
Dialogue: 0,0:57:41.27,0:57:46.27,Default,,0,0,0,,will future operates as necessity operators and all that stuff and so
Dialogue: 0,0:57:46.46,0:57:50.92,Default,,0,0,0,,ok TLA stands for the temporal logic of actions
Dialogue: 0,0:57:52.18,0:57:54.34,Default,,0,0,0,,temporal logic is evil
Dialogue: 0,0:57:54.50,0:57:59.47,Default,,0,0,0,,I can tell you explain why because it's very hard to use
Dialogue: 0,0:57:59.12,0:58:01.72,Default,,0,0,0,,but it turns out it's a necessary evil
Dialogue: 0,0:58:02.89,0:58:07.54,Default,,0,0,0,,temporal logic turns out to be the best way of thinking about liveness
Dialogue: 0,0:58:07.67,0:58:13.72,Default,,0,0,0,,and so if you use TLA plus when you get to the liveness part you're
Dialogue: 0,0:58:13.46,0:58:16.03,Default,,0,0,0,,going to be using temporal logic and be aware of it
Dialogue: 0,0:58:15.74,0:58:22.51,Default,,0,0,0,,but remember that I said that safety is more important and it turns out that you do not need to think
Dialogue: 0,0:58:22.31,0:58:24.46,Default,,0,0,0,,you got not need to know temporal logic
Dialogue: 0,0:58:24.47,0:58:26.32,Default,,0,0,0,,in order to handle safety
Dialogue: 0,0:58:26.33,0:58:34.15,Default,,0,0,0,,and what the reason I think you know that TL A+ is better than other kinds of temporal logic
Dialogue: 0,0:58:34.10,0:58:40.45,Default,,0,0,0,,is that you need-to-know essentially no temporal logic to use it for safety
Dialogue: 0,0:58:40.96,0:58:43.24,Default,,0,0,0,,if you look at the actual specification
Dialogue: 0,0:58:43.70,0:58:46.93,Default,,0,0,0,,there is the specific the TLA specification I've noticed
Dialogue: 0,0:58:46.85,0:58:49.21,Default,,0,0,0,,I've written it it's two formulas in it and next
Dialogue: 0,0:58:48.95,0:58:54.28,Default,,0,0,0,,well TLA allows you to combine them into a single temporal logic formula
Dialogue: 0,0:58:54.23,0:58:57.46,Default,,0,0,0,,which you you know you do at the end eventually
Dialogue: 0,0:58:57.74,0:59:01.99,Default,,0,0,0,,and but the idea of the thing it makes it great is that
Dialogue: 0,0:59:01.52,0:59:08.02,Default,,0,0,0,,you'll write a thousand line specification 999 lines are going to be ordinary math
Dialogue: 0,0:59:08.00,0:59:13.12,Default,,0,0,0,,initial predicate next state relation and then the last line is going to be a temporal logic formula
Dialogue: 0,0:59:13.45,0:59:14.95,Default,,0,0,0,,so okay
Dialogue: 0,0:59:16.78,0:59:19.84,Default,,0,0,0,,well do we have no
Dialogue: 0,0:59:20.83,0:59:25.57,Default,,0,0,0,,so we are now at the end of our plenary session
Dialogue: 0,0:59:25.76,0:59:29.56,Default,,0,0,0,,and I'd like to thank you very much but before we do that
Dialogue: 0,0:59:29.09,0:59:35.29,Default,,0,0,0,,just to remind you all we got the buses outside to go out to the dinner tonight
Dialogue: 0,0:59:35.09,0:59:39.22,Default,,0,0,0,,take your bags with you there will be space there for your bags
Dialogue: 0,0:59:38.96,0:59:43.24,Default,,0,0,0,,and then we'll be going back to the hotels or coming back here and
Dialogue: 0,0:59:42.98,0:59:45.28,Default,,0,0,0,,now thank you very much Leslie
Dialogue: 0,0:59:45.46,0:59:45.96,Default,,0,0,0,,[Applause]
